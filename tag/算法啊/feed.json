{
    "version": "https://jsonfeed.org/version/1",
    "title": "S1m • All posts by \"算法啊\" tag",
    "description": "博客记录个人学习笔记,处于不断完善中",
    "home_page_url": "http://s1mm.gitee.io/s1mm",
    "items": [
        {
            "id": "http://s1mm.gitee.io/s1mm/2022/10/09/suan-fa/",
            "url": "http://s1mm.gitee.io/s1mm/2022/10/09/suan-fa/",
            "title": "算法",
            "date_published": "2022-10-08T16:00:00.000Z",
            "content_html": "<h1 id=\"算法\"><a class=\"markdownIt-Anchor\" href=\"#算法\">#</a> 算法</h1>\n<p>基于 Acwing 算法课</p>\n<h2 id=\"算法基础课\"><a class=\"markdownIt-Anchor\" href=\"#算法基础课\">#</a> 算法基础课</h2>\n<h3 id=\"基础算法\"><a class=\"markdownIt-Anchor\" href=\"#基础算法\">#</a> 基础算法</h3>\n<p>算法：以空间来换取时间</p>\n<h4 id=\"快速排序\"><a class=\"markdownIt-Anchor\" href=\"#快速排序\">#</a> 快速排序</h4>\n<p>快速排序基于分治的思想，选取数<strong> x</strong> (从数组中任选), 将大于 x 的数放置于数组的左边，小于 x 的数放置于数组的右边</p>\n<p>处理过程采用<strong>双指针</strong>和<strong>递归</strong>进行处理</p>\n<p>时间复杂度最快<strong> O (nlogn)</strong> 最慢<strong> O (n^2)</strong>  取决于每一次随机选取的数在数组中的大小关系</p>\n<ul>\n<li>\n<p>时间复杂度最快</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E5%BF%AB%E6%8E%92%E6%9C%80%E5%BF%AB.png\" alt=\"快排最快\"></p>\n</li>\n<li>\n<p>时间复杂度最慢</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java195AF8FC790A2FAFE29FCFC35CCD6B87.png\" alt=\"时间复杂度最慢\"></p>\n</li>\n</ul>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">//快速排序基本模板\nvoid quick_sort(int q[],int l,int r)\n{\n    if(l &gt;= r) return;\n    int x = q[l]; //int x = q[r], int x = q[l+r &gt;&gt;1] 都可以 因为是随机选择\n    //这里有个边界问题, 如果后面以j为边界,这里就不能为q[r]  \n    //如果后面以i为边界,这里就不能为q[l];\n    int i = l -1,j = r + 1; // 先- 先+ 因为后面do while循环 会先进行-- 和++\n    while(i &lt; j)\n    {\n        //比较条件没有等号\n        do i++;while(q[i] &lt;x);\n        do j--;while(q[j] &gt;x);\n        if(i &lt; j) swap(q[i],q[j]);\n    }\n    quick_sort(q,l,j);\n    quick_sort(q,j+1,r);\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"快速查找\"><a class=\"markdownIt-Anchor\" href=\"#快速查找\">#</a> 快速 / 查找</h5>\n<p>快速查找采用的是<strong>快速排序 + 二分</strong>的思想，在排序过程中，如果可以确定值在两半的哪一半，就继续去查找那一半，另外一半就不需要查找了，这样</p>\n<ul>\n<li>最快的时间复杂度是 O (n);</li>\n<li>最慢仍然是 O (n^2);</li>\n</ul>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">//查找第k小的数\nint quick_search(int q[],int l,int r,int k)\n{\n    if(l &gt;= r) return q[l];\n    int x = q[l + r &gt;&gt;1],i = l - 1, j = r +1;\n    while(i&lt;j)\n    {\n        do i++;while(q[i] &lt; x);\n        do j--;while(q[j] &gt; x);\n        if(i &lt; j) swap(q[i],q[j]);\n    }\n    if(k &lt; j- l +1) return quick_search(q,l,j,k);\n    else return quick_search(q,j+1,r,k - (j -l +1));\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"归并排序\"><a class=\"markdownIt-Anchor\" href=\"#归并排序\">#</a> 归并排序</h4>\n<p>经典采取分治的思想，时间复杂度为 O (nlogn)</p>\n<ul>\n<li>优点：时间复杂度为 O (nlogn);</li>\n<li>缺点：使用了多余的空间</li>\n</ul>\n<p>通过不断递归，将整个数组无限二等分，直到最后分成单个，在通过比较，将分割后的数组合并起来.</p>\n<p>时间复杂度证明可以参照上面的<strong>快排最优</strong></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">//归并排序基本模板\nvoid merge_sort(int q[],int l,int r)\n{\n    if(l &gt;= r) return;\n    int mid = l + r &gt;&gt; 1;\n    \n    //递归不断二等分\n    merge_sort(q,l,mid);\n    merge_sort(q,mid + 1,r);\n    \n    //进行数组合并\n    int i =l,j = mid +1,k =0;\n    while(i &lt;= mid &amp;&amp; j &lt;= r)\n    {\n        if(q[i] &lt;= q[j]) tmp[k++] =q[i++];                //tmp数组 用空间换时间 临时存储\n            else tmp[k++] = q[j++];\n    }\n    while(i &lt;= mid) tmp[k++] = q[i++];\n    while(j &lt;= r) tmp[k++] = q[j++];\t\n    //将tmp排序好的数组重新赋值到原本的数组中\n    for(int i = l,j = 0;i &lt;= r;i++,j++)\n    \tq[i] = tmp[j];\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"二分查找\"><a class=\"markdownIt-Anchor\" href=\"#二分查找\">#</a> 二分查找</h4>\n<h5 id=\"整数二分\"><a class=\"markdownIt-Anchor\" href=\"#整数二分\">#</a> 整数二分</h5>\n<p>二分也是采用<strong>分治</strong>的方法，不断将一个<strong>有序</strong>数组分成两半，然后判断满足条件的数 (<strong>要查找的数</strong>) 是在左边还是右边</p>\n<p>二分存在<strong>边界问题</strong>，所以记忆一个模板可以<strong>有效避免边界问题</strong>。</p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">//当l = r 的时候停止，此时无论是取l 或者 取 r 输出都可以\n// 模板1\nvoid find(int q[],int l,int r)\n{\n    while(l &lt; r)\n    {\n       \tint mid = l + r &gt;&gt;1;\n        if(check(mid)) r = mid;  //check(mid)表示是否满足条件\n        else l = mid + 1;\n    }\n}\n\n//模板2\nvoid find(int q[],int l,int r)\n{\n    while(l &lt; r)\n    {\n       \tint mid = l + r + 1 &gt;&gt; 1\n        if(check(mid)) l = mid;  //check(mid)表示中心点是否满足条件\n        else r = mid - 1;\n    }\n}\n\n//通过check函数来判断使用哪个二分\n//注意对mid的使用 是导致边界问题的原因<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>部分问题，查找一个数的值，但数组中有<strong>多个一样的值都满足条件</strong>，如果确定搜到的答案 是所有满足条件的答案里面<strong>最左边的还是最右边的</strong></p>\n<p>这个时候需要根据模板 模拟一下，<strong> 当条件满足的时候</strong>，二分是在往左边查找，还是往右边查找.</p>\n<ul>\n<li>往右边查找 最后得到的就是最右边的值</li>\n<li>往左边不断查找，最后得到的就是最左边的值</li>\n<li>我们可以通过改变 check () 判断函数和模板的切换 来人为控制往左边查找和往右边查找的过程</li>\n</ul>\n<p><strong>边界</strong></p>\n<p>选择模板为了避免边界问题，灵活记忆</p>\n<ul>\n<li>如果满足条件的时候，需要 <code>l = mid</code> , 这个时候求 mid 就是 + 1</li>\n<li>如果满足条件的时候，需要 <code>r = mid</code> , 这个时候求 mid 就不需要 + 1, 就是普通的 (l + r) / 2;</li>\n</ul>\n<h5 id=\"小数二分\"><a class=\"markdownIt-Anchor\" href=\"#小数二分\">#</a> 小数二分</h5>\n<p>因为小数二分<strong>不存在这个边界问题</strong>，就非常简单</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">void find(int q[],int l,int r)\n{\n    while(l &lt; r)\n    {\n       \tint mid = l + r &gt;&gt;1;\n        if(check(mid)) r = mid;  //check(mid)表示是否满足条件\n        else l = mid;\n    }\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"高精度\"><a class=\"markdownIt-Anchor\" href=\"#高精度\">#</a> 高精度</h4>\n<p><strong>C++<strong> 中对</strong>大数存储不支持</strong>，所以需要用<strong>数组来存储</strong>大数，然后通过小时候学习的<strong>加法竖式等等</strong>的原理对数组进行处理，从而达到大数计算的目的</p>\n<p><strong>注意</strong>：因为<strong>进位</strong>的问题，所以在<strong>加减乘三个运算</strong>中反着输入数组，最后再将数组颠倒</p>\n<ul>\n<li>因为存在<strong>借位</strong>问题，减法的最后可能因为被借了一位被判断为 0，所以需要去除这个 0, 去除这个 0 的时候要考虑特例，这个 0 就是答案，所以还要判断是不是只有 1 个 0, 只有满足不止一位数，且最后一位是 0, 才去除这个 0</li>\n<li>同样减法也可能存在<strong>前置 0</strong>, 需要去除</li>\n</ul>\n<h5 id=\"高精度加法\"><a class=\"markdownIt-Anchor\" href=\"#高精度加法\">#</a> 高精度加法</h5>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">//进位问题 输入的数组都是反向存的\nvector&lt;int&gt; add(vector&lt;int&gt; &amp;a,vector&lt;int&gt; &amp;b)\n{\n    vector&lt;int&gt; c;\n    for(int i = 0 ,t = 0; t ||i &lt; a.size() || i &lt;b.size();i++)\n    {\n        if(i &lt;a.size()) t += a[i];\n        if(i &lt; b.size()) t += b[i];\n        c.push_back(t % 10);\n        t /= 10;\n    }\n    reverse(c.begin(),c.end());\n    return c;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"高精度减法\"><a class=\"markdownIt-Anchor\" href=\"#高精度减法\">#</a> 高精度减法</h5>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">//可以在外面先写个函数 保证输入减函数内部的时候一定是 a &gt;= b的\nbool cmp(vector&lt;int&gt; &amp;a,vector&lt;int&gt; &amp;b) //a &gt;= b 则返回true 否则返回false\n{\n    if(a.size()!= b.size()) return a.size() &gt;b.size(); //长度不一样的时候,显然长度大的更大\n    else\n    {\n        for(int i = 0 ; i &lt; a.size();i++)\n        {\n            if(a[i] != b[i]) return a[i] &gt;= b[i]; //当某个位置出现不一样的时候,该位置大的更大\n        }\n    }\n    return true; //长度相同 每个位置也相同 说明两个大数相等返回true\n}\n//默认输入的时候a &gt;= b;\nvector&lt;int&gt; sub(vector&lt;int&gt; &amp;a,vector&lt;int&gt; &amp;b)\n{\n    if(!cpm(a,b)) return sub(b,a); //如果a &lt; b 就进行b - a的操作\n    vector&lt;int&gt; c;\n    for(int i = 0, t = 0;i &lt; a.size();i++)\n    {\n        t += a[i];\n        if(i &lt;b.size()) t = t - b[i];\n        c.push_back((t +10) % 10); //保证插入的是正数\n        if(t &lt; 0) t = -1;\n        else t = 0;\n    }\n    while(c.size() &gt;1 &amp;&amp; c.back() == 0) c.pop_back(); //删除前置0,如果最后一个为0 并且不只有1个0(正确答案)，就将最后一位山区\n    reverse(c.begin(),c.end(0));\n    return c;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"高精度乘法\"><a class=\"markdownIt-Anchor\" href=\"#高精度乘法\">#</a> 高精度乘法</h5>\n<p>依据乘法<strong>竖式</strong></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">//高精度乘法一般是一个大数和一个小数相乘,不会出现大数乘大数\nvector&lt;int&gt; mul(vector&lt;int&gt; &amp;a,int b)\n{\n    vector&lt;int&gt; c;\n    for(int i = 0,t = 0 ; t || i &lt;a.size();i++)\n    {\n        if(i&lt; a.size())t += a[i] * b;\n        c.push_back(t % 10);\n        t /= 10;\n    }\n    reverse(c.begin(),c.end())\n    return c;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"高精度除法\"><a class=\"markdownIt-Anchor\" href=\"#高精度除法\">#</a> 高精度除法</h5>\n<p>高精度除法，不存在<strong>借位和进位</strong>的问题，所以按照原来的数组存储，但是最后需要<strong>翻转两次</strong>来<strong>去掉前缀 0</strong></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">//高精度除法,一般也为一个大数和一个小数相除\nvector&lt;int&gt; div(vector&lt;int&gt; a,int b,int &amp;r) // r用来存储余数 默认为0\n{\n    vector&lt;int&gt; c;\n    for(int i = 0,r = 0; i&lt; a.size();i++)\n    {\n        r = r * 10 + a[i];\n        c.push_back(r / b); //不够除的时候 自然传入的是0 所以也会有前缀0的问题\n        r = r % b; //取余数\n    }\n    reverse(c.begin(),c.end());\n    while(c.size() &gt;1 &amp;&amp; c.back() == 0) a.pop_back();\n    reverse(c.begin(),c.end());\n    return c;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"数学\"><a class=\"markdownIt-Anchor\" href=\"#数学\">#</a> 数学</h3>\n<h4 id=\"质数\"><a class=\"markdownIt-Anchor\" href=\"#质数\">#</a> 质数</h4>\n<h5 id=\"判断质因数\"><a class=\"markdownIt-Anchor\" href=\"#判断质因数\">#</a> 判断质因数</h5>\n<p>如果一个数除了表示成 1 和他自身的乘积外 还能表示成另外两个数的乘积  这个数就不是质因数</p>\n<p>反之一个数如果只能表示成 1 和他自身的乘积，那么这个数是质因数</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">bool is_prime(int x)\n{\n\tfor(int i = 2 ; i &lt;= x /i ;i++) //做了优化  将O(n)时间复杂度降到O(sqrt(n))  这里x/i不写成sqrt(x) sqrt()函数运行较慢 这样每次比较的时候,都会调用sqrt()函数 会大大提高时间\n    {\n        if(x % i == 0) return false\n    }\n    return true;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"优化\"><a class=\"markdownIt-Anchor\" href=\"#优化\">#</a> 优化</h6>\n<p>一个数 表示成两个数的乘积 显然这两个数是<strong>一大一小</strong>的</p>\n<p>如果 x 可以表示成 a *  b 的话  假设 a &lt; b 那么显然 <strong>a &lt; x / a</strong> 即  <strong>a &lt; sqrt(x)</strong></p>\n<h5 id=\"分解质因数\"><a class=\"markdownIt-Anchor\" href=\"#分解质因数\">#</a> 分解质因数</h5>\n<p>例如 12 = 2 * 2 * 3 一个合数可以被分解成若干个质数的乘积</p>\n<p>分解质因数就是找出一个合数 他所可以分解成的所有质因数</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">void get_primes(int x)\n{\n    for(int i = 2; i &lt;= x/ i;i++ )\n    {\n        if(x % i == 0)\n        {\n            int s = 0; \n            while(x % i == 0) //将一个质数 判断到底\n            {\n                x = x / i;\n                s++;\n            }\n            cout &lt;&lt; i &lt;&lt; s;\n        }\n    }\n    if(x &gt; x / i) cout &lt;&lt; x &lt;&lt;endl; //优化 数据单独处理\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"优化-2\"><a class=\"markdownIt-Anchor\" href=\"#优化-2\">#</a> 优化</h6>\n<p>分解质因数中 最多只存在一个质数大于<strong> sqrt (x)</strong></p>\n<p>所以将最后一个数 脱离出来<strong>单独处理</strong> 可以将时间复杂度 进行一个降低</p>\n<p>前半部分采用遍历的方式 最后一个数据单独处理</p>\n<h5 id=\"筛质数\"><a class=\"markdownIt-Anchor\" href=\"#筛质数\">#</a> 筛质数</h5>\n<p>给出一个数 x 把小于等于他的<strong>质数</strong>全部筛出来</p>\n<h6 id=\"埃式筛法onloglogn\"><a class=\"markdownIt-Anchor\" href=\"#埃式筛法onloglogn\">#</a> 埃式筛法 O (nloglogn)</h6>\n<p>从左往右遍历，找到一个质数的同时，就把 &lt;= n 范围内 他的所有倍数打上标签 (这个数不是质数)  遍历过程中没有打上标签的就是质数</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int primes[N]; // 存储所有质数\nbool st[N]; //这个数是否被筛过了\nint get_primes(int n)\n{\n    int cnt = 0 ;\n    for(int i = 2 ; i &lt;= n;i++)\n    {\n        if(st[i]) continue; //被筛过了 就跳过\n        prime[cnt++] = i;\n        for(int j = i + i; j &lt;= n; j += i)   //这里似乎 j 可以直接从i * i 开始 没理解\n        {\n            st[j] = true;\n        }\n    }\n    return cnt;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"欧式筛法线性筛法-on\"><a class=\"markdownIt-Anchor\" href=\"#欧式筛法线性筛法-on\">#</a> 欧式筛法 (线性筛法) O (n)</h6>\n<p>时间复杂度是线性的</p>\n<p>埃式筛法 筛查过程中存在大量的重复筛的问题 比如 2  * 2 = 4 已经被筛过了 但是在到 4 的同时还会被再筛查一遍</p>\n<p>所以欧式筛法采用的一个优化的方法 就是筛一个数的时候 只通过最小质因数来筛，这样每个数都只会被筛一遍</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">bool st[N];\nint primes[N];\nint get_primes(int n)\n{\n    int cnt = 0;\n    for(int i = 2 ; i &lt;= n;i++)\n    {\n        if(!st[i]) prime[cnt++] = i;\n        for(int j = 0 ; j &lt; cnt &amp;&amp; primes[j] &lt;= n \\ i;j++)\n        {\n            st[i * primes[j]] = true;\n            if(i % primes[j] == 0) break; //优化所在 如果i是primes[j]的倍数 显然后面 primes[j+1]就不会是最小的质因数了 就break\n        }\n    }\n    return cnt;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"约数\"><a class=\"markdownIt-Anchor\" href=\"#约数\">#</a> 约数</h4>\n<h5 id=\"试除法求约数\"><a class=\"markdownIt-Anchor\" href=\"#试除法求约数\">#</a> 试除法求约数</h5>\n<p><strong>与前面判断质因数相同</strong></p>\n<h5 id=\"约数个数\"><a class=\"markdownIt-Anchor\" href=\"#约数个数\">#</a> 约数个数</h5>\n<p>对于一个大于 1 正整数 n 可以<a href=\"https://baike.baidu.com/item/%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0?fromModule=lemma_inlink\">分解质因数</a>：</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaafef3bf76b93359a0067ea80e57bca0e.svg\" alt=\"img\"></p>\n<p>则 n 的<a href=\"https://baike.baidu.com/item/%E6%AD%A3%E7%BA%A6%E6%95%B0/882466?fromModule=lemma_inlink\">正约数</a>的个数就是</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java21c38a03ef417a187c0a202b37ce59c4.svg\" alt=\"img\"></p>\n<p>其中 a1、a2、a3…ak 是 p1、p2、p3，…pk 的指数。首先同上，n 可以<a href=\"https://baike.baidu.com/item/%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0/2253749?fromModule=lemma_inlink\">分解质因数</a>：</p>\n<p><img src=\"https://bkimg.cdn.bcebos.com/formula/7acc0c37dfea06c873d081dba44b2164.svg\" alt=\"img\"></p>\n<p><strong>证明</strong></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E7%BA%A6%E6%95%B0%E4%B8%AA%E6%95%B0%E5%AE%9A%E7%90%86%E8%AF%81%E6%98%8E.png\" alt=\"约数个数定理证明\"></p>\n<p>所以进行程序书写的时候，可以先用<strong>质数中的分解质因数</strong>的方法，找到所有的质数和他们的指数，然后进行计算</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">unordered_map&lt;int,int&gt;prime;\nint getnum(int x)\n{\n    for(int i = 0 ; i &lt;= n/i;i++) //筛质数\n    {\n        while(x % i == 0)\n        {\n            x /= i;\n            prime[i]++; //存储指数\n        }\n    }   \n    if(x &gt;1) prime[x]++; //现在已经将所有的质数和他们的指数筛出来了\n    int res = 1;\n    for(auto p:prime)\n    {\n        res *= p.second +1;\n    }\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"约数之和\"><a class=\"markdownIt-Anchor\" href=\"#约数之和\">#</a> 约数之和</h5>\n<p>同样利用公式</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E7%BA%A6%E6%95%B0%E5%92%8C%E5%AE%9A%E7%90%86.png\" alt=\"约数和定理\"></p>\n<p><strong>证明</strong>：进行乘法分配律将括号打开，得到的就是所有因数的和</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">unordered_map&lt;int,int&gt;prime;\nint getallnum(int x)\n{\n    for(int i = 0 ; i &lt;= n/i;i++) //筛质数\n    {\n        while(x % i == 0)\n        {\n            x /= i;\n            prime[i]++; //存储指数\n        }\n    }\n    int res = 1;\n    for(auto p : prime)\n    {\n        int ans = 0;\n        int x = p.first;\n        int y = p.second;\n        while(y--)  ans = ans * p + 1;\n        res *= ans;\n    }\n    return res;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"最大公约数\"><a class=\"markdownIt-Anchor\" href=\"#最大公约数\">#</a> 最大公约数</h5>\n<p><strong>(a,b) 的最大公约数等于（b,a % b）的最大公约数</strong></p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E5%8E%9F%E7%90%86%E8%AF%81%E6%98%8E.png\" alt=\"辗转相除原理证明\"></p>\n<p>通过这个式子可以利用递归，不断减小，直到 a% b 等于 0, 此时最大公约数就找到了</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int gck(int a,int b)\n{\n  \treturn b?gck(b,a%b):a;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"欧拉函数\"><a class=\"markdownIt-Anchor\" href=\"#欧拉函数\">#</a> 欧拉函数</h4>\n<p>求 1∼N 中与 N 互质的数的个数被称为欧拉函数，记为 ϕ(N)</p>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/java%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0.png\" alt=\"欧拉函数\"></p>\n<p>其中 p1 ~ pk 是 N 的所有质因子</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int getola(int x)\n{\n    int res =x;\n    for(int i = 2 ; i &lt;= x\\i;i++)\n    {\n        if(x % i == 0)\n        {\n            res = (long long )res *(i -1)/ i;\n            while(x % i == 0) x /= i;\n        }\n    }\n    if(x &gt;1) res = (long long)res *(x - 1)/x;\n    return res;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"欧拉定理小费马定理\"><a class=\"markdownIt-Anchor\" href=\"#欧拉定理小费马定理\">#</a> 欧拉定理 + 小费马定理</h5>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86%E5%B0%8F%E8%B4%B9%E9%A9%AC%E5%AE%9A%E7%90%86.png\" alt=\"欧拉定理小费马定理\"></p>\n<h5 id=\"筛发求欧拉函数\"><a class=\"markdownIt-Anchor\" href=\"#筛发求欧拉函数\">#</a> 筛发求欧拉函数</h5>\n<p>求出所有小于 N 的数的欧拉值</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">bool st[N];\nint cnt,primes[N],ola[N];\nlong long getallola(int n)\n{\n    ola[1] = 1;\n    for(int i = 2; i &lt;= n;i++)\n    {\n        if(!st[i]) \n        {\n        \tprimes[cnt++] = i;\n            ola[i] = i -1; //显然一个数如果是质数 他的欧拉值 比他小的所有数的和\n        }\n        for(int j = 0; primes[j] &lt;= n/i;j++)\n        {\n            st[i * primes[j]] = true;\n            if(i % primes[j] == 0)\n            {\n                ola[i * primes[j]] = primes[j] * ola[i];\n                break;\n            }\n            else ola[i * primes[j]] = ola[i] * (primes[j] - 1);\n        }\n    }\n    long long res = 0;\n       for(int i = 1 ; i &lt;= n ; i++)\n        res += (long long)ola[i];\n    return res;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img/javaPNN~XFP6Q74$8QXO4YY%5B9%60J.png\" alt=\"从欧筛中延伸\"></p>\n<h4 id=\"快速幂\"><a class=\"markdownIt-Anchor\" href=\"#快速幂\">#</a> 快速幂</h4>\n<p>时间复杂度从 O (n) 降低到 O (logn);</p>\n<p>将质数不断切分成平方形式，切分<strong> logn</strong> 次</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">qmi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> k <span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">)</span> <span class=\"token comment\">//求a^^k % p的结果</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> res  <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> res <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> res <span class=\"token operator\">*</span> a <span class=\"token operator\">%</span> p<span class=\"token punctuation\">;</span>\n        k <span class=\"token operator\">&gt;&gt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>a <span class=\"token operator\">*</span> a <span class=\"token operator\">%</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"扩展欧几里得算法\"><a class=\"markdownIt-Anchor\" href=\"#扩展欧几里得算法\">#</a> 扩展欧几里得算法</h4>\n<p>存在 x 和 y 使得 ax + by = gcd (a,b)</p>\n<p>扩展欧几里得算法求出 x 和 y</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">// 通过引用获取x和y的值\nint exgcd(int a,int b,int &amp;x,int &amp;y)\n{\n    if(!b)\n    {\n        x =1 ;\n        y = 0;\n        return a;\n    }\n    int x1,y1,d;\n    d = exgcd(b,a%b,x1,y1);\n    x = y1;\n    y = x1 - a/b * y1;\n    return d;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://s1mimg.oss-cn-chengdu.aliyuncs.com/img%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95.png\" alt=\"扩展欧几里得算法\"></p>\n",
            "tags": [
                "算法啊"
            ]
        }
    ]
}