{
    "version": "https://jsonfeed.org/version/1",
    "title": "YogMas学习站 • All posts by \"python\" tag",
    "description": "",
    "home_page_url": "http://yogmas-wang.top",
    "items": [
        {
            "id": "http://yogmas-wang.top/2022/07/10/python/",
            "url": "http://yogmas-wang.top/2022/07/10/python/",
            "title": "python",
            "date_published": "2022-07-09T16:00:00.000Z",
            "content_html": "<h1 id=\"python\"><a class=\"markdownIt-Anchor\" href=\"#python\">#</a> Python</h1>\n<p>The article made by  <code>Yogmas</code>  on 2022/7/08</p>\n<h2 id=\"变量和字符串\"><a class=\"markdownIt-Anchor\" href=\"#变量和字符串\">#</a> 变量和字符串</h2>\n<h3 id=\"变量\"><a class=\"markdownIt-Anchor\" href=\"#变量\">#</a> 变量</h3>\n<ul>\n<li>变量名由字母，数字和下划线组成</li>\n<li>不能以数字开头</li>\n<li>区分大小写</li>\n<li>python3 变量名支持中文字符</li>\n</ul>\n<p>变量值交换:  <code>x,y = y,x</code> (python)</p>\n<p><code>_</code> 单独一个下划线可以用来表示临时变量</p>\n<h3 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\">#</a> 字符串</h3>\n<ul>\n<li>\n<p>单引号模式</p>\n</li>\n<li>\n<p>双引号模式</p>\n</li>\n<li>\n<p>三引号模式 (三单或三双都可)- 长字符串</p>\n<p>在长字符串中不需要运用换行符进行换行，代码中的换行就相当于换行符</p>\n</li>\n</ul>\n<p>单引号和双引号互相灵活应用，防止冲突</p>\n<p>冲突不可避免的时候可以使用转义字符</p>\n<h4 id=\"转义字符\"><a class=\"markdownIt-Anchor\" href=\"#转义字符\">#</a> 转义字符</h4>\n<p><a href=\"https://imgtu.com/i/j0bPlq\"><img src=\"https://s1.ax1x.com/2022/07/08/j0bPlq.png\" alt=\"转义字符\"></a></p>\n<p>原始字符串：在字符串前面加上一个 <code>r</code>  表示该字符串是原始字符串，这样在此字符串中就不会产生转义字符</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\three\\two\\one\\now\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#\\t \\t \\o \\n 将会被当成转义字符输出</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">r\"D:\\three\\two\\one\\now\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#将会按照原始字符串输出</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><code>\\</code>  不能放在字符串的末尾</p>\n<h4 id=\"字符串的加法和乘法\"><a class=\"markdownIt-Anchor\" href=\"#字符串的加法和乘法\">#</a> 字符串的加法和乘法</h4>\n<p>字符串是<strong>文本</strong></p>\n<ol>\n<li>字符串的加法就是对文本进行拼接</li>\n<li>字符串的乘法就是对文本就行复制粘贴</li>\n</ol>\n<h3 id=\"运算符\"><a class=\"markdownIt-Anchor\" href=\"#运算符\">#</a> 运算符</h3>\n<h4 id=\"比较运算符\"><a class=\"markdownIt-Anchor\" href=\"#比较运算符\">#</a> 比较运算符</h4>\n<p><a href=\"https://imgtu.com/i/j0bHN4\"><img src=\"https://s1.ax1x.com/2022/07/08/j0bHN4.png\" alt=\"比较运算符\"></a></p>\n<h4 id=\"逻辑运算符\"><a class=\"markdownIt-Anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符</h4>\n<p><a href=\"https://imgtu.com/i/jfd6KO\"><img src=\"https://s1.ax1x.com/2022/07/14/jfd6KO.png\" alt=\"逻辑运算符\"></a></p>\n<p>python 的操作数支持真值运算，如果给到的是两个数，那么最后得到的就不会是 <code>True</code>  和 <code>False</code>  而是一个数</p>\n<h4 id=\"运算符优先级\"><a class=\"markdownIt-Anchor\" href=\"#运算符优先级\">#</a> 运算符优先级</h4>\n<p><a href=\"https://imgtu.com/i/jfwlee\"><img src=\"https://s1.ax1x.com/2022/07/14/jfwlee.png\" alt=\"运算符优先级\"></a></p>\n<h4 id=\"短路逻辑运算\"><a class=\"markdownIt-Anchor\" href=\"#短路逻辑运算\">#</a> 短路逻辑运算</h4>\n<p>从左往右，当第一个操作数的值无法确定逻辑运算的结果时，才对第二个操作数进行求值</p>\n<p>eg: 3 or 4 = 3     3 and 4 = 4          0 and 3 = 0</p>\n<h4 id=\"is运算符同一性运算符\"><a class=\"markdownIt-Anchor\" href=\"#is运算符同一性运算符\">#</a> is 运算符 (同一性运算符)</h4>\n<p>检验两个元素是否指向同一个对象</p>\n<h2 id=\"python模块\"><a class=\"markdownIt-Anchor\" href=\"#python模块\">#</a> python 模块</h2>\n<h3 id=\"随机数-random\"><a class=\"markdownIt-Anchor\" href=\"#随机数-random\">#</a> 随机数 random</h3>\n<p>import random</p>\n<ul>\n<li>random.randint(x,y)</li>\n<li>random.getstate () 获取随机数种子</li>\n<li>random.setstate (x) 设置随机数种子</li>\n</ul>\n<h3 id=\"十进制-decimal\"><a class=\"markdownIt-Anchor\" href=\"#十进制-decimal\">#</a> 十进制 decimal</h3>\n<p>用于精确计算浮点数的相加</p>\n<ul>\n<li>a = decimal.Decimal(’ 0.1 ')</li>\n</ul>\n<h2 id=\"数字类型\"><a class=\"markdownIt-Anchor\" href=\"#数字类型\">#</a> 数字类型</h2>\n<h3 id=\"整数\"><a class=\"markdownIt-Anchor\" href=\"#整数\">#</a> 整数</h3>\n<p>python 的整数长度不受限制有<strong>无限大的精度</strong></p>\n<p>整数相除会产生浮点数的结果</p>\n<h3 id=\"浮点数\"><a class=\"markdownIt-Anchor\" href=\"#浮点数\">#</a> 浮点数</h3>\n<p>浮点数具有精度上的误差  精确计算查看上文<strong> decimal</strong></p>\n<p>eg. 0.1 + 0.2 != 0.3</p>\n<p>浮点数也可以用可以用科学计数法来表示</p>\n<p>eg 5e-05</p>\n<h3 id=\"复数\"><a class=\"markdownIt-Anchor\" href=\"#复数\">#</a> 复数</h3>\n<p>x + yj</p>\n<p>x 是实部，y 是虚部</p>\n<p>复数的实部和虚部都是以浮点数的形式存储的</p>\n<ul>\n<li>x.real 获取实部数值</li>\n<li>x.imag 获取虚部数值</li>\n</ul>\n<h3 id=\"数字运算\"><a class=\"markdownIt-Anchor\" href=\"#数字运算\">#</a> 数字运算</h3>\n<p><a href=\"https://imgtu.com/i/jgpCct\"><img src=\"https://s1.ax1x.com/2022/07/12/jgpCct.png\" alt=\"数字运算\"></a></p>\n<ul>\n<li><code>//</code> (地板除): 将除法的结果向下取整</li>\n<li><code>divmod</code>  (内置函数): <code>divmod(x,y)</code>  返回 <code>x//y</code> , <code>x%y</code> , 等于求出商和 余数</li>\n<li><code>abs()</code> : 返回绝对值，传入复数，返回<strong>复数的模</strong></li>\n<li><code>pow(x,y,z)</code> : <code>pow(x,y,z)</code> =x**y %z</li>\n</ul>\n<h3 id=\"布尔类型\"><a class=\"markdownIt-Anchor\" href=\"#布尔类型\">#</a> 布尔类型</h3>\n<ul>\n<li>空字符串是 False, 其他全是 True</li>\n<li>0 是 False 其他都是 True</li>\n</ul>\n<p><a href=\"https://imgtu.com/i/jfdmDg\"><img src=\"https://s1.ax1x.com/2022/07/14/jfdmDg.png\" alt=\"布尔\"></a></p>\n<p><code>Fraction(0,1)</code>  表示分子是 0, 分母是 1 的分数</p>\n<p>布尔类型就是特殊的整数类型</p>\n<p>True = 1,False = 0</p>\n<h2 id=\"分支与循环\"><a class=\"markdownIt-Anchor\" href=\"#分支与循环\">#</a> 分支与循环</h2>\n<h3 id=\"分支\"><a class=\"markdownIt-Anchor\" href=\"#分支\">#</a> 分支</h3>\n<h4 id=\"if语句\"><a class=\"markdownIt-Anchor\" href=\"#if语句\">#</a> if 语句</h4>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> 判断语句<span class=\"token punctuation\">:</span>\n    执行语句\n<span class=\"token keyword\">elif</span> 判断语句<span class=\"token punctuation\">:</span>\n    执行语句\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    执行语句<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"条件表达式\"><a class=\"markdownIt-Anchor\" href=\"#条件表达式\">#</a> 条件表达式</h5>\n<p><code>执行语句 if 判断语句 else 执行语句</code></p>\n<p>可以用小括号将多行的代码括起来表示这是一行代码</p>\n<h3 id=\"循环\"><a class=\"markdownIt-Anchor\" href=\"#循环\">#</a> 循环</h3>\n<h4 id=\"while循环\"><a class=\"markdownIt-Anchor\" href=\"#while循环\">#</a> while 循环</h4>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">while</span> condition<span class=\"token punctuation\">:</span> \n    statement\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n   <span class=\"token comment\">#else可以不用,else在while条件不成立的时候执行,当while是由于break语句跳出的时候不执行,适用于区分任务连续完成和中断的情况</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><code>break</code>  语句用于跳出循环</li>\n<li><code>continue</code>  用于结束本次循环，继续判断下一次循环的条件，相当于直接跳到本次循环体的最后一句代码的后面</li>\n<li><code>break</code>  和 <code>continue</code>  都只能跳出一层循环体</li>\n</ul>\n<h4 id=\"for循环\"><a class=\"markdownIt-Anchor\" href=\"#for循环\">#</a> for 循环</h4>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> 变量 <span class=\"token keyword\">in</span> 可迭代对象<span class=\"token punctuation\">:</span>\n    statement<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h5 id=\"range函数\"><a class=\"markdownIt-Anchor\" href=\"#range函数\">#</a>  <code>range</code>  函数</h5>\n<ul>\n<li><code>range(stop)</code>  生成从 **[0,stop)** 的整数序列</li>\n<li><code>range(start,stop)</code>  生成从 **[start,stop)** 的整数数列</li>\n<li><code>range(start,stop,step)</code>  生成从 **[start,stop)<strong> 的整数数列，可以指定</strong> step** 跨度</li>\n</ul>\n<h2 id=\"列表\"><a class=\"markdownIt-Anchor\" href=\"#列表\">#</a> 列表</h2>\n<p>python 的列表可以容纳不同数据类型的数据</p>\n<p>列表是可变的，字符串是不可变的</p>\n<h3 id=\"创建列表\"><a class=\"markdownIt-Anchor\" href=\"#创建列表\">#</a> 创建列表</h3>\n<ul>\n<li><code>[1,2,3,4,5,\"勇敢的sam\"]</code>  使用中括号创建列表</li>\n<li>利用列表推导式:  <code>S = [ [0] * 3 for i in range(3)]</code></li>\n</ul>\n<h3 id=\"访问列表\"><a class=\"markdownIt-Anchor\" href=\"#访问列表\">#</a> 访问列表</h3>\n<p>采用<strong>下标索引</strong>访问列表，</p>\n<ul>\n<li>正向访问:python 的下标索引从<strong> 0</strong> 开始，依次递增</li>\n<li>逆向访问:python 下标索引可以从后往前访问，从 **-1** 开始依次递减</li>\n</ul>\n<h3 id=\"列表切片\"><a class=\"markdownIt-Anchor\" href=\"#列表切片\">#</a> 列表切片</h3>\n<ul>\n<li><code>Name[start:end]</code>  从 <code>Name[start]</code>  到 <code>Name[end-1]</code>  的列表元素</li>\n<li><code>Name[:end]</code>  从头到 <code>Name[end -1]</code></li>\n<li><code>Name[start:]</code>  从 <code>Name[start]</code>  到列表末尾</li>\n<li><code>Name[:]</code>  表示列表中的全部元素</li>\n<li><code>Name[start:end:step]</code>  可以设置 step 跨度值，当 step 为负值的时候，表示从列表最后一个元素开始倒着输出</li>\n<li><code>Name[::-1]</code> : 直接将列表反转</li>\n</ul>\n<h3 id=\"列表的多种方法\"><a class=\"markdownIt-Anchor\" href=\"#列表的多种方法\">#</a> 列表的多种方法</h3>\n<h4 id=\"增加\"><a class=\"markdownIt-Anchor\" href=\"#增加\">#</a> 增加</h4>\n<ul>\n<li><code>Name.append()</code> : 在列表的末尾添加指定元素，但是每次只能添加一个元素</li>\n<li><code>Name.extend()</code> : 在列表的末尾添加一个可迭代对象，与 <code>append</code>  相比可以同时添加多个元素</li>\n<li>通过切片实现:\n<ul>\n<li>实现 <code>append()</code> : Name[len(Name):] = XXX</li>\n<li>实现  <code>extend()</code> :Name[len(Name):] = [x,y,z]</li>\n</ul>\n</li>\n<li><code>Name.insert(x,y)</code> :x 为待插入的位置，y 为待插入的元素</li>\n</ul>\n<h4 id=\"删除\"><a class=\"markdownIt-Anchor\" href=\"#删除\">#</a> 删除</h4>\n<ul>\n<li><code>Name.remove(元素值)</code> : 指定删除一个元素\n<ol>\n<li>如果列表中有多个相同元素 只会删除第一个元素</li>\n<li>如果元素不存在，程序则会报错</li>\n</ol>\n</li>\n<li><code>Name.pop(下标索引值)</code> : 删除下标索引值上的元素</li>\n<li><code>Name.clear()</code> : 直接清空列表中的所有元素</li>\n</ul>\n<h4 id=\"修改\"><a class=\"markdownIt-Anchor\" href=\"#修改\">#</a> 修改</h4>\n<ul>\n<li><code>Name[下标索引值] = X</code></li>\n<li><code>Name.sort()</code> : 将列表从小到大进行排序 在括号中加上 <code>reverse = True</code> , 就可以实现从大到下排序</li>\n<li><code>Name.reverse()</code> : 将列表中的元素顺序进行翻转</li>\n</ul>\n<h4 id=\"查找\"><a class=\"markdownIt-Anchor\" href=\"#查找\">#</a> 查找</h4>\n<ul>\n<li>\n<p><code>Name.count(元素值)</code> : 查找某个元素值在列表中有多少个</p>\n</li>\n<li>\n<p><code>Name.index(元素值,start,end)</code> : 查找 start 到 end 区间某个元素的下标索引值，有多个值时返回第一个</p>\n<p>eg:  <code>Name[Name.index(\"zzz\")] = \"zgg\"</code></p>\n</li>\n<li>\n<p><code>Name.copy()</code> : 对列表进行拷贝</p>\n</li>\n</ul>\n<h4 id=\"计算\"><a class=\"markdownIt-Anchor\" href=\"#计算\">#</a> 计算</h4>\n<p>加法：将两个列表中的元素进行拼接</p>\n<p>乘法：将一个列表中的元素重复若干次</p>\n<h3 id=\"嵌套列表多维列表\"><a class=\"markdownIt-Anchor\" href=\"#嵌套列表多维列表\">#</a> 嵌套列表 (多维列表)</h3>\n<p><code>[[x,y,z],[a,b,c],[e,f,d]]</code></p>\n<p>相同的列表元素，python 也会开辟不同的空间来存储列表元素，因为列表是可变的</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">A  <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">3</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"深拷贝与浅拷贝\"><a class=\"markdownIt-Anchor\" href=\"#深拷贝与浅拷贝\">#</a> 深拷贝与浅拷贝</h3>\n<p>变量的赋值 仅仅是将存储内容的地址引用到变量上</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nb <span class=\"token operator\">=</span> a \na<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nb <span class=\"token operator\">=</span> ? <span class=\"token comment\">#b会等于[1,1,3] 并不是将数据复制了过去,而是将这一团数据的引用给了b,本质上还是同一个存储数据的地方</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"浅拷贝\"><a class=\"markdownIt-Anchor\" href=\"#浅拷贝\">#</a> 浅拷贝</h4>\n<ul>\n<li><code>Name.copy()</code> : 列表的 copy 方法</li>\n<li>先导入 copy 模块  <code>y = copy.copy(x)</code></li>\n<li>应用列表切片</li>\n</ul>\n<h4 id=\"深拷贝\"><a class=\"markdownIt-Anchor\" href=\"#深拷贝\">#</a> 深拷贝</h4>\n<p>浅拷贝只会拷贝最外层，拷贝内层数据的时候也只会拷贝引用，所以对于嵌套列表等等就需要深拷贝来进行拷贝</p>\n<ul>\n<li>先导入 copy 模块  <code>y = copy.deepcopy(x)</code></li>\n</ul>\n<h3 id=\"列表推导式\"><a class=\"markdownIt-Anchor\" href=\"#列表推导式\">#</a> 列表推导式</h3>\n<p>列表推导式的效率比循环语句一般会快上一倍左右</p>\n<ol>\n<li><code>[expression for target in iterable]</code></li>\n<li><code>[expresssion for target in iterable if condition]</code>  先执行 for 语句，然后进行 if 语句的判断，最后进行插入</li>\n<li>列表推导式的嵌套: <code>[expression for target in iterable1 for target in iterable2 for target in iterable3]</code>  嵌套中放在前面的是外层前套，从前往后依次嵌套</li>\n</ol>\n<p><code>ord()</code> : 内置函数，将字符转化为对应的编码</p>\n<h2 id=\"元组\"><a class=\"markdownIt-Anchor\" href=\"#元组\">#</a> 元组</h2>\n<p>元组拥有列表的性质，且元组不可修改、</p>\n<p>元组中的元素不可变，但是元组的元素如果是可变的列表，我们可以修改列表中的值</p>\n<p><code>a = (1,2,3,4,5)</code></p>\n<p><strong>没有元组推导式的存在</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#此时x是int变量</span>\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#此时x是只有一个元素的元组</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"打包和解包\"><a class=\"markdownIt-Anchor\" href=\"#打包和解包\">#</a> 打包和解包</h3>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">code <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"sam\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"zgg\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#打包</span>\nx<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z <span class=\"token operator\">=</span> code <span class=\"token comment\">#解包 左侧变量数量必须等于右侧的元素数量</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"字符串-2\"><a class=\"markdownIt-Anchor\" href=\"#字符串-2\">#</a> 字符串</h2>\n<p>字符串是不可改变的</p>\n<h3 id=\"字符串方法\"><a class=\"markdownIt-Anchor\" href=\"#字符串方法\">#</a> 字符串方法</h3>\n<p>因为字符串不可变，所以下列方法的实质是按照规则生成新的字符串再重新赋值</p>\n<h4 id=\"更改大小写字母\"><a class=\"markdownIt-Anchor\" href=\"#更改大小写字母\">#</a> 更改大小写字母</h4>\n<ul>\n<li><code>x.capitalize()</code> : 首字母变成大写，其他变成小写</li>\n<li><code>x.casefold()</code> : 将所有字符串变成小写，可以处理多语言</li>\n<li><code>x.title()</code> : 字符串中<strong>每个单词</strong>的首字母变成大写，其他的变成小写</li>\n<li><code>x.swapcase()</code> : 进行大小写字母的翻转</li>\n<li><code>x.upper()</code> : 所有字母变成大写</li>\n<li><code>x.lower()</code> : 所有字母变成小写，只能处理英语</li>\n</ul>\n<h4 id=\"左中右对齐\"><a class=\"markdownIt-Anchor\" href=\"#左中右对齐\">#</a> 左中右对齐</h4>\n<p>拥有参数 <code>width</code>  代表填充过后的字符串长度，如果该参数小于原字符串的长度，就会输出原字符串</p>\n<p><code>fillchar</code> : 填充字符</p>\n<ul>\n<li><code>x.center(width,fillchar):</code>  实现居中，默认用空格填充</li>\n<li><code>x.ljust(width,fillchar)</code> : 实现左对齐，默认用空格填充</li>\n<li><code>x.rjust(width,fillchar)</code> : 实现右对齐，默认用空格填充</li>\n<li><code>x.zfill(width,fillchar)</code> : 实现左对齐，默认用 <code>0</code>  填充</li>\n</ul>\n",
            "tags": [
                "python"
            ]
        }
    ]
}