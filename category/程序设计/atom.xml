<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://yogmas-wang.top</id>
    <title>YogMas学习站 • Posts by &#34;程序设计&#34; category</title>
    <link href="http://yogmas-wang.top" />
    <updated>2021-11-05T16:00:00.000Z</updated>
    <category term="Css" />
    <category term="C语言" />
    <category term="Html" />
    <category term="Javascript" />
    <category term="icoding答案" />
    <category term="数学建模" />
    <entry>
        <id>http://yogmas-wang.top/2021/11/06/c-yu-yan/</id>
        <title>C语言</title>
        <link rel="alternate" href="http://yogmas-wang.top/2021/11/06/c-yu-yan/"/>
        <content type="html">&lt;h1 id=&#34;c语言&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#c语言&#34;&gt;#&lt;/a&gt; C 语言&lt;/h1&gt;
&lt;!-- The Article Made by YogMas --&gt;
&lt;h2 id=&#34;the-article-made-by-yogmas&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#the-article-made-by-yogmas&#34;&gt;#&lt;/a&gt; The Article Made by YogMas&lt;/h2&gt;
&lt;p&gt;推荐用书: C Primer Plus (本文章绝大部分内容来自于关于此书的学习过程中记录 还有部分来自于 C 语言程序设计第二版 以及 UESTC MOOC)&lt;/p&gt;
&lt;h3 id=&#34;c语言的执行过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#c语言的执行过程&#34;&gt;#&lt;/a&gt; C 语言的执行过程&lt;/h3&gt;
&lt;p&gt;1. 预处理：可以给程序添加内容也可以修改程序 (例如: #include&amp;lt;stdio.h&amp;gt; 就会在预处理中运用 stdio.h 中的内容对源代码进行处理)&lt;br&gt;
 2. 编译：将预处理过的语言转变为机器指令.&lt;br&gt;
3. 链接：把编译器产生的目标代码和所需的其他附加代码整合到一起，产生最终完全可执行的程序.&lt;br&gt;
(这三个过程是自动实现的)&lt;/p&gt;
&lt;h3 id=&#34;c语言开始&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#c语言开始&#34;&gt;#&lt;/a&gt; C 语言开始&lt;/h3&gt;
&lt;h4 id=&#34;基本结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基本结构&#34;&gt;#&lt;/a&gt; 基本结构&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;指令&lt;br&gt;
 int main (void)&lt;br&gt;
{&lt;br&gt;
语句&lt;br&gt;
}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;指令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#指令&#34;&gt;#&lt;/a&gt; 指令&lt;/h4&gt;
&lt;p&gt;例如 #include &amp;lt;stdio.h&amp;gt; 这条指令说明在编译前将 &amp;lt; stdio.h &amp;gt; 中的信息包含到程序中&lt;/p&gt;
&lt;h4 id=&#34;函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数&#34;&gt;#&lt;/a&gt; 函数&lt;/h4&gt;
&lt;p&gt;函数分为两类，一类是程序员写的函数，一类是作为 C 语言实现的一部分提供的函数，我们把后者称为库函数。&lt;/p&gt;
&lt;h4 id=&#34;语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#语句&#34;&gt;#&lt;/a&gt; 语句&lt;/h4&gt;
&lt;p&gt;一种是调用语句 例如 printf (&#34;&#34;); 就是调用打印函数，将内容打印在屏幕上&lt;/p&gt;
&lt;p&gt;一种是返回语句&lt;br&gt;
&lt;strong&gt; C 语言的每条语句都要以；结尾&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;注释&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注释&#34;&gt;#&lt;/a&gt; 注释&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;/*     */ 
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;注释中的内容不会计入到程序中，只是方便程序员观看理解内容&lt;/p&gt;
&lt;p&gt;“盒子形状” 注释&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;    /*************************
    *                        *
    *                        *
    *************************/
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;如此可以方便程序员更好地观察到注释&lt;/p&gt;
&lt;p&gt;C99 提供了另一种注释的方法&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;// XXXXXXXXX
  双斜杠注释
   这种风格的注释会在行末自动终止，注释第二行还应该添加双斜杠
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;优点：多行 // 可以让注释更加醒目，由于每一行都必须添加 // 可以有效防止注释吞没程序的事情发生&lt;/p&gt;
&lt;h4 id=&#34;变量和赋值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#变量和赋值&#34;&gt;#&lt;/a&gt; 变量和赋值&lt;/h4&gt;
&lt;p&gt;程序进行一系列的运算，会有一种临时存储数据的方法，这种储存单元被称为变量&lt;/p&gt;
&lt;h4 id=&#34;类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#类型&#34;&gt;#&lt;/a&gt; 类型&lt;/h4&gt;
&lt;p&gt;每个变量都有一个类型，来说明所储存的数据的种类&lt;br&gt;
列入 int (整数) 类型和 float (小数) 类型&lt;/p&gt;
&lt;p&gt;同时 float 类型可以储存的数可以比 int 大很多，但是坏处就是 float 的计算可能更加缓慢，而且会造成一定量的误差&lt;/p&gt;
&lt;h4 id=&#34;声明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#声明&#34;&gt;#&lt;/a&gt; 声明&lt;/h4&gt;
&lt;p&gt;声明变量首先确定变量的类型，然后说明变量的名字&lt;br&gt;
 eg int height&lt;br&gt;
int 就是变量的类型，而 height 就是变量的名字&lt;br&gt;
&lt;strong&gt; main 的声明要放在语句之前&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;赋值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#赋值&#34;&gt;#&lt;/a&gt; 赋值&lt;/h4&gt;
&lt;p&gt;变量通过赋值语句获得值&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;eg: height=8
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;这种确定的数值称为常量&lt;br&gt;
赋值右侧可以是一个含有常量，变量和运算符的公式，在 C 语言中称为&lt;strong&gt;表达式&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;显示变量的值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#显示变量的值&#34;&gt;#&lt;/a&gt; 显示变量的值&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;eg:pritnf(&#34;%d \n&#34;,height)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里 % d 是一个占位符，用来指明在显示过程中变量 height 的显示位置&lt;/p&gt;
&lt;p&gt;% d 只用于 int     % f 用于 float 类型变量 f 显示小数点后六位，没有的用 0 补齐&lt;br&gt;
&lt;strong&gt;注意声明和赋值可以同时进行&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;eg: int weight=8&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要注意的是，以下这种情况只有 width 拥有初始化器 10&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int height,length,width=10&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;宏定义给常量命名&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#宏定义给常量命名&#34;&gt;#&lt;/a&gt; 宏定义给常量命名&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;eg:#define INCHES 166&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在后面的程序中所有的 INCHES 都会被替换成 166，这里需要注意的，一般宏定义的名称都用大写字母表示，这里没有硬性规定，但这是程序员遵循了几十年的基本准则，可以方便程序更方便的阅读&lt;br&gt;
同样后面的 166 也可以为一个表达式，表达式建议用括号括上&lt;br&gt;
&lt;strong&gt;注意 C 语言四舍五入时向下取整&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;标识符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#标识符&#34;&gt;#&lt;/a&gt; 标识符&lt;/h4&gt;
&lt;p&gt;在编写程序时，需要进行大量的命名，这些名字被称为&lt;strong&gt;标识符&lt;/strong&gt;，在 C 语言中标识符可以有字母，数字，和下划线，但是必须&lt;strong&gt;以字母或者下划线开头&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同时标识符是区分大小写的也就是说 JOB 和 job 是两个完全不同的标识符&lt;/p&gt;
&lt;h4 id=&#34;关键字&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#关键字&#34;&gt;#&lt;/a&gt; 关键字&lt;/h4&gt;
&lt;p&gt;关键字对 C 编译器有着特殊的意义，因此这些关键字不能作为标识符来使用&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IQ9uZQ&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQ9uZQ.md.jpg&#34; alt=&#34;IQ9uZQ.md.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;书写规范&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#书写规范&#34;&gt;#&lt;/a&gt; 书写规范&lt;/h4&gt;
&lt;p&gt;语句可以分开放在任意多行内。&lt;br&gt;
记号间的宫格可以让我们更容易区分记号，基于这个原因，我通常会在每个运算符的前后都放上一个空格&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt; eg volume = height * width * length
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;缩进有助于轻松识别程序嵌套&lt;/p&gt;
&lt;p&gt;空行可以把程序分为逻辑单元，从而使读者更容易辨别程序的结构，没有空行的程序很难阅读，就像不分章节的书一样.&lt;/p&gt;
&lt;h3 id=&#34;格式化输入输出&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#格式化输入输出&#34;&gt;#&lt;/a&gt; 格式化输入 / 输出&lt;/h3&gt;
&lt;h4 id=&#34;printf函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#printf函数&#34;&gt;#&lt;/a&gt; printf 函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;   printf(&#34; i = %d , j = %d&#34;,i,j);
   printf(格式化字符串,表达式1，表达式2,...;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;格式化字母串包含&lt;strong&gt;普通字符&lt;/strong&gt;和&lt;strong&gt;转换说明&lt;/strong&gt;&lt;br&gt;
转换说明以 % 开头，% 后面的信息指定了把数值从内部形式转换为打印字母的方法&lt;br&gt;
 eg:% d 表示把 int 型数值从二进制转换成十进制的字符串&lt;/p&gt;
&lt;p&gt;注意编译器不会检测格式串中转换说明的数量是否和输出项的数量相匹配，但是如果多于或者少于会让程序简单地无意义地输出&lt;br&gt;
如果转换说明的个数小于变量数，多的变量就无法显示出来&lt;br&gt;
变量和占位符不匹配时，就是显示出一个无意义的数值.&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IQ9FPI&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQ9FPI.png&#34; alt=&#34;IQ9FPI.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;转换说明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#转换说明&#34;&gt;#&lt;/a&gt; 转换说明&lt;/h5&gt;
&lt;h5 id=&#34;标志&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#标志&#34;&gt;#&lt;/a&gt; 标志&lt;/h5&gt;
&lt;p&gt;-: 左对齐，也就是加空格或 0 时加在后面&lt;br&gt;
不加 - 默认为右对齐，也就是加空格或 0 时加在前面&lt;/p&gt;
&lt;p&gt;0: 加 0 表示用空格代替 0，不加 0 时输出的值多的用空格代替&lt;/p&gt;
&lt;h6 id=&#34;最小栏宽m&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最小栏宽m&#34;&gt;#&lt;/a&gt; 最小栏宽 m&lt;/h6&gt;
&lt;p&gt;最小栏宽 m 指定了要显示的最少字符数量 (&lt;strong&gt;m 表示了输出的数最少占几列&lt;/strong&gt;)，如果要系那是的字符数少于 m，那么值在字段内是右对齐的 (换句话说，在值得前面显示空格)&lt;br&gt;
 例如 %4d 将以&lt;strong&gt;空格 123&lt;/strong&gt; 的形式显示数 123，如果要显示的值所需字符多于 m，那么栏宽会自动拓展为所需的尺寸。因此，转换说明 %4d 将以 12345 的形式显示数 12345，而不会丢失数字。在 m 前放上一个负号，会导致左对齐；转换说明 %-4d 将以&lt;strong&gt; 123 空格&lt;/strong&gt;的形式显示 123&lt;/p&gt;
&lt;h6 id=&#34;精度p&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#精度p&#34;&gt;#&lt;/a&gt; 精度 p&lt;/h6&gt;
&lt;p&gt;精度的含义很难 6+&lt;br&gt;
+ 描述，因为他依赖于转换指定符号&lt;br&gt;
 d:p 指明了待限制数字的最少个数 (包括空格)&lt;br&gt;
, 如果省略 p，则默认它的值为 1&lt;br&gt;
e: 表示科学计数法形式的浮点数。p 指明了小数点后应该出现的数字个数 (默认值为 6) 如果 p 为 0 则不显示小数点&lt;br&gt;
 g: 自动选 f 格式或 e 格式中较短的一种输出，且不输出无意义的 0&lt;br&gt;
o：无符号数转化为八进制数&lt;br&gt;
 x：无符号数转化为十六进制数&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IQ9ARP&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQ9ARP.png&#34; alt=&#34;IQ9ARP.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IQ9Exf&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQ9Exf.png&#34; alt=&#34;IQ9Exf.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;转义序列&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#转义序列&#34;&gt;#&lt;/a&gt; 转义序列&lt;/h5&gt;
&lt;p&gt;警报响铃符:    \a&lt;br&gt;
 回退符:     \b&lt;br&gt;
 换行符:     \n&lt;br&gt;
 水平制表符：   \t&lt;br&gt;
“:”( \  + 特殊字符 = 特殊字符 )&lt;/p&gt;
&lt;h4 id=&#34;scanf函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#scanf函数&#34;&gt;#&lt;/a&gt; scanf 函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;scanf (&#34;&amp;amp;d&#34;, 变量名)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;scanf 函数起到读取用户输入到屏幕的数据&lt;br&gt;
 pritnf 函数起到将程序中的数据显示到屏幕上的作用&lt;br&gt;
 scanf 与 prinf 函数是相对的&lt;br&gt;
 scanf 函数的工作原理 这里不一一叙述&lt;br&gt;
可见程序与设计第 32 页 3.2.1&lt;/p&gt;
&lt;p&gt;另外 % i 也可以充当整数的占位符，在 printf 中与 % d 没有区别，但是在 scanf 中 % i 可以储存 10 进制，8 进制，16 进制的数字，而 % d 只能储存 10 进制的数字，如果输入的数前面有 0 那么 % i 会当成 8 进制处理，如果前面有 0x 那么输入的数会当成 16 进制处理，所以一般情况下我们坚持使用 % d，防止因为在数字前面加入 0 而导致数据识别错误&lt;/p&gt;
&lt;h4 id=&#34;表达式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#表达式&#34;&gt;#&lt;/a&gt; 表达式&lt;/h4&gt;
&lt;h5 id=&#34;算术运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#算术运算符&#34;&gt;#&lt;/a&gt; 算术运算符&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;一元运算符: + 正号  - 负号&lt;br&gt;
二元运算符: + 加法 - 减法  * 乘法  / 除法 % 求余&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可能产生的意外结果&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;两个操作数都是整数时，结果会进行四舍五入，例如 1/2 的结果是 0 而不是 0.5&lt;br&gt;
% 要求操作数是整数 如果两个操作数中有一个不是整数，程序将无法编译通过&lt;br&gt;
根据 C89 标准，如果两个运算符中有一个为负数，那么结果不确定，可能向上取整，也可能向下取整&lt;br&gt;
在 C99 标准中 除法的结果总是趋向 0 截取    i% j 的结果的值得负号与 i 相同 例如 - 9%7 的结果为 - 2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;优先级和结合性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#优先级和结合性&#34;&gt;#&lt;/a&gt; 优先级和结合性&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;最高优先级: + - (一元运算符)  *  /  %&lt;br&gt;
 最低优先级:    +  -  (二元运算符)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当有多个相同优先级的符号时，从左到右依次结合.&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IQ99VH&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQ99VH.png&#34; alt=&#34;IQ99VH.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;赋值运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#赋值运算符&#34;&gt;#&lt;/a&gt; 赋值运算符&lt;/h5&gt;
&lt;p&gt;求出表达式的值后，将值储存在变量中，就需要对变量进行赋值&lt;/p&gt;
&lt;p&gt;如果变量表示的含义和所输入的数字不同，将会把数字改成变量所对应的数字&lt;br&gt;
例如: int i=72.999   这个时候 i 对应的值就是 72 而不是 72.999&lt;/p&gt;
&lt;p&gt;多个运算符可以串联在一起&lt;br&gt;
 i = j = k = 0;&lt;br&gt;
 需要注意的是，赋值表达式是从右开始赋值的&lt;br&gt;
 i = (j = (k = 0))&lt;/p&gt;
&lt;h5 id=&#34;左值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#左值&#34;&gt;#&lt;/a&gt; 左值&lt;/h5&gt;
&lt;p&gt;大多数 C 语言运算符允许他们的操作数是变量，常量，或者是其他运算符表达式，但是他们的&lt;strong&gt;左值&lt;/strong&gt;必须是对象&lt;/p&gt;
&lt;p&gt;目前为止&lt;strong&gt;变量&lt;/strong&gt;是唯一的左值&lt;/p&gt;
&lt;h5 id=&#34;复合赋值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#复合赋值&#34;&gt;#&lt;/a&gt; 复合赋值&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;复合运算符 -=,*=,/=,%=,+=&lt;br&gt;
 另外 5 种赋值运算符将在后面的章节中介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;v += e 表示 v 加上 e 再把结果储存在 v 中&lt;br&gt;
这并不等价于 v = v+e 例如变量 i*=j+k 就不等于 i= i*j + k&lt;/p&gt;
&lt;p&gt;复合赋值运算符同样也是右结合的&lt;br&gt;
语句 i += j += k 表示 i += (j += k)&lt;/p&gt;
&lt;p&gt;最常使用的两种运算是 自增和自减&lt;br&gt;
例如 i = i + 1 而复合运算符可以缩短这串代码 可以改写为 i += 1&lt;/p&gt;
&lt;h5 id=&#34;自增运算符和自减运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自增运算符和自减运算符&#34;&gt;#&lt;/a&gt; 自增运算符和自减运算符&lt;/h5&gt;
&lt;p&gt;C 语言还允许使用 ++ (自增) 和 – (自减) 运算符将这些语句缩得更短&lt;br&gt;
实际上自增和自减运算符的使用非常复杂，原因是 ++ 和 -- 既可以作为前缀，也可以作为后缀，根据实际使用情况而定&lt;/p&gt;
&lt;p&gt;而这种情况实际上是有副作用的，副作用的效果就是自增 i&lt;/p&gt;
&lt;p&gt;前缀自增和后缀自增的区别：前缀自增表示先自增 i 再将变量 i 代入表达式中，后缀自增表示先把变量 i 代入表达式中，再自增 i&lt;/p&gt;
&lt;p&gt;并且在同一个句子中多次使用 ++ 和 -- 往往难以理解，例如&lt;br&gt;
 i = 1; j = 2 ; k = &lt;ins&gt;i + j&lt;/ins&gt;;&lt;/p&gt;
&lt;p&gt;后缀&lt;ins&gt;和 -- 优先级 比正号和负号高，并且都是左结合&lt;br&gt;
前缀&lt;/ins&gt;和 -- 优先级和正号负号相同，并且都是右结合&lt;/p&gt;
&lt;h4 id=&#34;选择语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#选择语句&#34;&gt;#&lt;/a&gt; 选择语句&lt;/h4&gt;
&lt;h5 id=&#34;逻辑表达式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#逻辑表达式&#34;&gt;#&lt;/a&gt; 逻辑表达式&lt;/h5&gt;
&lt;p&gt;测试表达式的结果是 &#34;真&#34; 还是 &#34;假&#34;，这类表达式只有这两个效果，翻译为电脑语言就是这个表示只会输出两个值 0 或者 1&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IQ9ZM8&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQ9ZM8.png&#34; alt=&#34;IQ9ZM8.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 逻辑运算符对操作数进行短路计算，这些运算符首先计算出左操作数的值，然后计算出右操作数的值，如果做操作数的值可以直接推导表达式的值，那么将不计算右操作数的值&lt;/p&gt;
&lt;p&gt;运算符！的优先级等于一元正负号的优先级，而运算符 &amp;amp;&amp;amp; 和 || 的优先级低于关系运算符和判等运算符，运算符！是右结合的，而运算符 &amp;amp;&amp;amp; 和运算符 || 是左结合的.&lt;/p&gt;
&lt;h5 id=&#34;关系运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#关系运算符&#34;&gt;#&lt;/a&gt; 关系运算符&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IQ9PIA&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQ9PIA.png&#34; alt=&#34;IQ9PIA.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;需要注意的是 i &amp;lt; j &amp;lt; k 并不是所想象的 j 处在 i 和 k 的中间值得意思，表达式是左结合的&lt;br&gt;
所以原式式 (i &amp;lt; j) &amp;lt; k  先对 i &amp;lt; j 进行判定，输出 0 或者 1 来和 k 进行比较&lt;/p&gt;
&lt;h5 id=&#34;判等运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#判等运算符&#34;&gt;#&lt;/a&gt; 判等运算符&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IQ9esS&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQ9esS.png&#34; alt=&#34;IQ9esS.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;i &amp;lt;j == j &amp;lt; k 等价于 (i &amp;lt; j) == (j &amp;lt; k)&lt;br&gt;
 只有当 两边同为真或者同为假的时候 输出结果为真&lt;/p&gt;
&lt;h5 id=&#34;运算顺序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#运算顺序&#34;&gt;#&lt;/a&gt; 运算顺序&lt;/h5&gt;
&lt;p&gt;C 语言对括号的运算顺序没有进行规定，所以因为编译器的不同可能出现不同的结果&lt;br&gt;
例如 a = 5 ;&lt;br&gt;
c = (b = a + 2 ) - ( a = 1 )&lt;br&gt;
 先算 b = a + 2 还是先算 a = 1 不同的编译器有着不一样的算法，所以如果编译器不同，可能产生不一样的结果&lt;/p&gt;
&lt;p&gt;注意不要依赖特定的运算顺序&lt;/p&gt;
&lt;p&gt;例如: i = 2 ;  j = i * i++;&lt;br&gt;
 大部分人可能会认为输出的结果是 4，其实也可能为 6，不同的编译器有时候会出现不同的结果&lt;br&gt;
最好的方法就是将长的运算表达式转化为短的运算表达式，如此就可以适应不同的编译器.&lt;/p&gt;
&lt;h4 id=&#34;if语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#if语句&#34;&gt;#&lt;/a&gt; if 语句&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;if (表达式) 语句&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意表达式两边的括号是必须的&lt;br&gt;
计算时先计算括号内表达式的值，如果表达式的值非零也就是真值，那么接着执行括号后面的语句.&lt;br&gt;
 一定要注意区分 ==(判等) 和 =(赋值)&lt;br&gt;
 前面我们说了例如 i &amp;lt; j &amp;lt; k 这样的写法是不行的，为了判定变量是否落在某个数值范围内，例如为了判定 0≤ i &amp;lt; n 我们可以写成&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;if (0 &amp;lt;= i &amp;amp;&amp;amp; i&amp;lt; n) …&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;|| 运算符也是相同的道理&lt;/p&gt;
&lt;h5 id=&#34;复合语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#复合语句&#34;&gt;#&lt;/a&gt; 复合语句&lt;/h5&gt;
&lt;p&gt;在 if 语句模板中，语句是一条语句而不是多条语句，如果想用 if 语句处理多条语句，我们引入了复合语句.&lt;br&gt;
 复合语句由一对花括号和语句混合而成，可以有多个声明和多个语句，也可以什么都没有&lt;br&gt;
为了表示清楚，通常将一条语句放在多行内，每行有一条语句，如下所示:&lt;br&gt;
{&lt;br&gt;
line_num = 0;&lt;br&gt;
page_num++;&lt;br&gt;
}&lt;br&gt;
 注意，每条内部语句依然以&lt;strong&gt;分号&lt;/strong&gt;结尾&lt;/p&gt;
&lt;h5 id=&#34;else子句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#else子句&#34;&gt;#&lt;/a&gt; else 子句&lt;/h5&gt;
&lt;p&gt;if 语句可以有 else 子句&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;if (表达式) 语句 else 语句&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意，出现的语句末尾都要以&lt;strong&gt;分号&lt;/strong&gt;结尾&lt;/p&gt;
&lt;p&gt;通常来说为了布局美观，和清楚显示代码，我们将 if 和 else 放在同一列，其内的内部语句同样进行缩进&lt;br&gt;
可以为复合语句增加花括号，这不是必需的但是能够使复合语句更加清楚.&lt;/p&gt;
&lt;h4 id=&#34;条件表达式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#条件表达式&#34;&gt;#&lt;/a&gt; 条件表达式&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;表达式 1 ? 表达式 2 : 表达式 3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;表达式 1,2,3 可以是任何类型的表达式，同时条件表达式被经常称为三元运算符.&lt;/p&gt;
&lt;p&gt;条件表达式读作 如果表达式 1 成立，那么表达式 2，否则表达式 3&lt;br&gt;
 求值步骤为：首先计算出表达式 1 的值，如果此值不为 0，那么计算表达式 2 的值，并且计算出来的值就是整个表达式的值，如果表达式 1 的值为 0，那么表达式 3 的值是整个条件表达式的值&lt;/p&gt;
&lt;p&gt;条件表达式通常运用于 printf 中进行简化代码&lt;/p&gt;
&lt;p&gt;例如 if (i&amp;gt; j ) printf (&#34;% d \n&#34;,i); else printf (&#34;% d \n&#34;,j);&lt;br&gt;
 可以简化为  printf (&#34;% d \n&#34;,i&amp;gt;j?i:j);&lt;br&gt;
 同时在 return 中也经常使用，使用场景类似&lt;/p&gt;
&lt;h4 id=&#34;switch语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#switch语句&#34;&gt;#&lt;/a&gt; switch 语句&lt;/h4&gt;
&lt;p&gt;通常来说可以用 switch 语句来代替级联式 if 语句&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;switch (表达式) {&lt;br&gt;
case 常量表达式：语句&lt;br&gt;
…&lt;br&gt;
case 常量表达式：语句&lt;br&gt;
 default : 语句&lt;br&gt;
}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同样这里的语句也要以&lt;strong&gt;分号&lt;/strong&gt;结尾&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IQ9mqg&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQ9mqg.jpg&#34; alt=&#34;IQ9mqg.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;switch 语句实际上是一种给予计算的跳转。对控制表达式求值时， 控制会跳转到与 switch 表达式的值相匹配的分支标号处。在执行完一个分支后，程序控制向下跳转到下一个分支的第一条语句上，如果没有 break 语句，控制将从一个分支继续流向下一个分支。例如&lt;br&gt;
 switch (grade) {&lt;br&gt;
case 4 :printf (“Excellent”);&lt;br&gt;
case 3 :printf (“Good”);&lt;br&gt;
case 2 :printf (“Average”);&lt;br&gt;
case 1 :printf (“poor”);&lt;br&gt;
case 0 :printf (“Falling”);&lt;br&gt;
default : printf (“Illegal grade”)&lt;br&gt;
}&lt;br&gt;
 当你输入 3 时，显示的消息是：GoodAveragePoorFailingIllegal grade&lt;/p&gt;
&lt;h3 id=&#34;循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#循环&#34;&gt;#&lt;/a&gt; 循环&lt;/h3&gt;
&lt;h4 id=&#34;while语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#while语句&#34;&gt;#&lt;/a&gt; while 语句&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;[while语句]:    while (表达式) 语句
例如: while(i&amp;lt;n) i=i*2;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为 while 语句中有循环，为了让循环更简单，我们可以将 i++ 或者 i–直接加到 printf 中来使代码更加简洁&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;例如: while(i&amp;gt;0) printf(&#34;%d \n&#34;,i--)
这串代码可以一直输出0~i的数字，是不是这样更加简洁
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;do语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#do语句&#34;&gt;#&lt;/a&gt; do 语句&lt;/h4&gt;
&lt;p&gt;do 语句在本质上其实就是 while 语句只不过其控制表达式是在每次执行完循环体之后进行判定.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;[do语句]: do 语句  while(表达式):
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;do 语句的循环体必须是一条语句和 while 一样，当然如果想用多条语句可以用复合语句.&lt;/p&gt;
&lt;p&gt;执行 do 语句时，先执行循环体，再计算控制表达式的值&lt;/p&gt;
&lt;h4 id=&#34;for语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#for语句&#34;&gt;#&lt;/a&gt; for 语句&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;[for语句]    for(表达式1或者声明;表达式2;表达式3)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IQpd8P&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQpd8P.png&#34; alt=&#34;IQpd8P.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对于向上增或向下减的循环来说，for 语句通常是最好的选择&lt;/p&gt;
&lt;p&gt;从 0 向上加到 n-1&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;for (i=0;i&amp;lt;n;i++)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;从 1 向上加到 n&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;for(i=1;i&amp;lt;=n,i++)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;等等同理&lt;/p&gt;
&lt;p&gt;如果所需要的语句没有那么多，for 语句允许省略语句，注意，即使省略了表达式，括号中也许有两个&lt;strong&gt;分号&lt;/strong&gt;&lt;br&gt;
当 for 语句同时省略第一个和第三个表达式时，那么他和 while 语句没有任何区别&lt;br&gt;
省略第一个语句时，程序会默认为真值，会一直循环下去&lt;/p&gt;
&lt;p&gt;在 C99 中第一个表达式可以替换成一个声明，但在 for 语言中的声明，仅可以在 for 语句内部使用，在 for 循环的外部不可用&lt;/p&gt;
&lt;p&gt;同时 for 语言中可以声明多个变量，但是他们的类型需要相同&lt;/p&gt;
&lt;h4 id=&#34;逗号运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#逗号运算符&#34;&gt;#&lt;/a&gt; 逗号运算符&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;[逗号表达式] 表达式1,表达式2
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一步计算出表达式 1 的值，抛弃。第二部计算出表达式 2 的值，并将表达式 2 的值作为整个表达式的值，需要注意的是这里并不是说表达式 1 的值并没有用，表达式 1 中例如 i++，i–等仍然会对表达式 2 中的 i 和 j 造成一定的影响&lt;/p&gt;
&lt;p&gt;逗号运算符是左结合的，并且逗号运算符的优先级比其他所有运算符的优先级都更低&lt;/p&gt;
&lt;p&gt;for 语句是唯一可以发现逗号运算符的地方.&lt;br&gt;
for 语句可以利用逗号表达式来声明更多的变量&lt;/p&gt;
&lt;h3 id=&#34;跳出循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#跳出循环&#34;&gt;#&lt;/a&gt; 跳出循环&lt;/h3&gt;
&lt;h4 id=&#34;break语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#break语句&#34;&gt;#&lt;/a&gt; break 语句&lt;/h4&gt;
&lt;p&gt;前面讨论过 break 语句跳出 switch 语句，同时 break 语句还可以用于跳出 while,do,for 循环&lt;/p&gt;
&lt;p&gt;需要注意的时，如果有嵌套的情况存在，break 语句只能跳出一层循环&lt;/p&gt;
&lt;h4 id=&#34;continue语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#continue语句&#34;&gt;#&lt;/a&gt; continue 语句&lt;/h4&gt;
&lt;p&gt;continue 语句与 break 语句的区别在于，break 语句把程序控制转移到循环体末尾之后，而 continue 语句刚好把程序控制转移到循环体末尾之前.&lt;br&gt;
continue 语句会把程序控制留在循环内，而 break 语句会使程序控制跳出循环&lt;br&gt;
 continue 语句只能用于循环，而 break 语句可以用于 switch 语句和循环&lt;/p&gt;
&lt;p&gt;continue 语句不会跳出循环，但会直接跳过 continue 之后的一系列语句，重新开始循环&lt;/p&gt;
&lt;h4 id=&#34;goto语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#goto语句&#34;&gt;#&lt;/a&gt; goto 语句&lt;/h4&gt;
&lt;p&gt;goto 语句可以跳转到函数中任何有&lt;strong&gt;标号&lt;/strong&gt;的语句处&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;[标号语句]  标识符:语句
[goto语句]  goto 标识符;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;两个语句必须在同一个函数中&lt;br&gt;
 goto 语句对于嵌套循环的退出是很有用的&lt;/p&gt;
&lt;h4 id=&#34;空语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#空语句&#34;&gt;#&lt;/a&gt; 空语句&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;eg:for(XX;XX;XX);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;空语句的一个好处：编写空循环体的循环.&lt;br&gt;
C 程序员习惯性地把空语句单独放置在一行&lt;/p&gt;
&lt;h3 id=&#34;基本类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基本类型&#34;&gt;#&lt;/a&gt; 基本类型&lt;/h3&gt;
&lt;p&gt;C 语言支持两种根本的数据类型 分别是 整数类型 和浮点数类型  简单来说 整数和其他数 (包括小数等等) 的区别&lt;/p&gt;
&lt;h4 id=&#34;整数类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#整数类型&#34;&gt;#&lt;/a&gt; 整数类型&lt;/h4&gt;
&lt;p&gt;正说类型 分为 有符号整数和无符号整数&lt;/p&gt;
&lt;p&gt;有符号整数：如果整数为正数或者 0 那么最左边的符号位为 0; 如果为负数 那么最左边的符号位为 1 储存的时候都是按有符号整数来储存 如果要当成无符号整数来储存 需要声明整数类型为 unsigned&lt;br&gt;
 无符号整数：最左边的位是数值的一部分&lt;/p&gt;
&lt;p&gt;C 语言的整数类型 有着不同的大小 int 类型通常为 32 位   有些数字很大 所以 C 语言还提供了 长整型 和 需要很小空间来储存的数 这样的数称为短整型&lt;/p&gt;
&lt;p&gt;整型分为 4 种 long short signed unsigned 他们之间可以互相组合&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;short int
unsigned short int
int
unsigned int
long int
unsigned long int
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;其他组合都是上述组合的同义词&lt;br&gt;
 C 语言允许通过省略单词 int 来缩写整数类型的名字&lt;br&gt;
但很多基于 c 语言的程序 甚至不允许程序员写 short int 这样的名字 而必须写成 short 或者 long&lt;br&gt;
 不同类型的取值范围也可能一样&lt;br&gt;
 eg: long int 可能和 int 有相同的取值范围  但是 long int 永远不可能比 int 的取值范围短&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IQpcUs&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQpcUs.png&#34; alt=&#34;IQpcUs.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IQpsbQ&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQpsbQ.png&#34; alt=&#34;IQpsbQ.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IQp0v8&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQp0v8.png&#34; alt=&#34;IQp0v8.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 但是这种范围会随着编译器的不同而不同 好的解决方法是检查 &amp;lt;limis.h&amp;gt; 头文件定义了每种整数类型的最大值和最小值的宏&lt;br&gt;
 C99 新增了 2 个 long long int 和 unsigned long long int&lt;/p&gt;
&lt;h5 id=&#34;整数常量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#整数常量&#34;&gt;#&lt;/a&gt; 整数常量&lt;/h5&gt;
&lt;p&gt;常量：在程序中以文本形式出现的数，而不是读，写，计算出来的数.C 语言允许用十进制，八进制，十六进制来表示常量&lt;/p&gt;
&lt;p&gt;十进制不能以 0 开头 八进制必须以 0 开头 十六进制总是以 0x 开头&lt;br&gt;
这里需要注意的是  这些只是书写数的方式 并不会对数的储存方式产生英雄 数都是以二进制储存的 所以我们进行计算的时候甚至可以将他们三个混合使用 程序仍然能够识别 并且计算出值&lt;br&gt;
十进制整数常量的类型同城为 nit 但如果常量的值大得无法储存在 int 型中 那就用 long int 类型。如果出现 long int 还不够用的罕见情况 编译器会用 unsigned long int 做最后的尝试&lt;br&gt;
八进制和十六进制 会从范围最小的整数型开始尝试 直至找到能表示该常量的类型&lt;/p&gt;
&lt;p&gt;要强制编译器把常量作为长整数来处理，只需要在后边加上一个字母 L/l  &lt;strong&gt;大小写无所谓&lt;/strong&gt;&lt;br&gt;
同样 要指明是无符号变量 可以在常量后边加上字母 U/u&lt;br&gt;
&lt;strong&gt;L 和 U 可以混合使用 顺序和大小都无所谓&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;c99中的整型变量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#c99中的整型变量&#34;&gt;#&lt;/a&gt; C99 中的整型变量&lt;/h5&gt;
&lt;p&gt;在 C99 中 出现了 LL (long long) 在 ll 前面 U 的通常是 unsigned long long  需要注意的是 &lt;strong&gt;这里两个 l 的大小写需要一致&lt;/strong&gt;&lt;br&gt;
十进制储存 按照 int      long int   long long int 中的最小的能适合的方式储存&lt;br&gt;
而八进制和十六进制 按照 int        unsigned int          long int           unsigned long int   ……&lt;/p&gt;
&lt;h5 id=&#34;整数溢出&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#整数溢出&#34;&gt;#&lt;/a&gt; 整数溢出&lt;/h5&gt;
&lt;p&gt;对整数执行算数运算时，其结果有可能因为太大而无法显示，这时候就会发生整数溢出&lt;br&gt;
有符号整数溢出时 会出现没有定义的情况 无法预估最后会发生的情况&lt;br&gt;
无符号整数溢出时 结果会有定义的：正确答案对 2 的 n 次方取模 例如 65535+1 的结果 (能够被 2 除尽) 其结果可以保证为 0&lt;/p&gt;
&lt;h5 id=&#34;读写整数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#读写整数&#34;&gt;#&lt;/a&gt; 读 / 写整数&lt;/h5&gt;
&lt;p&gt;通常我们发生整数溢出时，会马上去更换整数类型 但单单这样做是不够的 我们还必须检查数据类型的改变对程序其他部分的影响&lt;/p&gt;
&lt;p&gt;读写无符号整数时 使用 u,o,x 代替转换说明中的 d&lt;br&gt;
u 表示十进制 o 表示八进制 x 表示十六进制&lt;/p&gt;
&lt;p&gt;读写短整数时 在 d,o,x 或者 u 前面加上字母 h&lt;/p&gt;
&lt;p&gt;读写长整数时，在 d,o,x 或者 u 前面加上字母 l&lt;/p&gt;
&lt;p&gt;读写尝尝整数时，在 d,o,x 或者 u 前面加上字母 ll&lt;/p&gt;
&lt;h4 id=&#34;浮点类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#浮点类型&#34;&gt;#&lt;/a&gt; 浮点类型&lt;/h4&gt;
&lt;p&gt;float: 单精度浮点数&lt;br&gt;
 double: 双精度浮点数&lt;br&gt;
 long double: 扩展精度浮点数&lt;/p&gt;
&lt;p&gt;C 语言没有明确的说明精度到底是多少 不同的计算机可以以不同的方法储存浮点数&lt;/p&gt;
&lt;p&gt;数值是由三部分组成：符号，指数和小数 指数部分的位数说明了数值可能大小程度 而小数部分的位数说明了精度&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IQpwgf&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQpwgf.png&#34; alt=&#34;IQpwgf.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
long double 类型没有出现在表中 因为它的长度随着机器的不同而变化 最常见的大小是 80 位和 128 位&lt;/p&gt;
&lt;p&gt;C99 中 浮点类型分为两种 一种是实浮点类型 包括 float,double,long double 类型&lt;br&gt;
另一种是 C99 新增的复数类型  包括 float ,_Complex ,double ,_Complex ,long double _Complex&lt;/p&gt;
&lt;h5 id=&#34;浮点常量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#浮点常量&#34;&gt;#&lt;/a&gt; 浮点常量&lt;/h5&gt;
&lt;p&gt;浮点常量必须包括小数点或者指数 其中指数指明了对前面的数进行缩放所需的 10 的幂次 如果有指数 则需要在指数数值前放置字母 E 或者 e 可选符号 + 或者 - 可以出现在字母 E 或者 e 的后边 为了表明只需要单精度 可以在常量的末尾处加上字母 F/f; 而为了说明常量必须以 long double 的形式储存可以在常量的末尾处 加上字母 L 或者 l&lt;/p&gt;
&lt;h5 id=&#34;读写浮点数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#读写浮点数&#34;&gt;#&lt;/a&gt; 读写浮点数&lt;/h5&gt;
&lt;p&gt;前面已讨论过，转换说明 % e,% f 和 % g 用于读写单精度浮点数 读写 double 和 long double 类型的值所需的转换说明略有不同&lt;br&gt;
读写 double 类型的值时，在 e,f,g 前面放置字母 l   &lt;strong&gt;注意只能在字符串 scanf 中使用 在 printf 函数调用中使用额 e,f,g 可以用来写 float 类型或者 double 类型的值&lt;/strong&gt;&lt;br&gt;
读写 long double 类型时，在 e,f,g 前面放置字母 L&lt;br&gt;
&lt;strong&gt; 注意 double 和 long double 这里有字母大小写的区别&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;字符类型char&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符类型char&#34;&gt;#&lt;/a&gt; 字符类型 char&lt;/h4&gt;
&lt;p&gt;当前最常用的字符集是 ASCII 字符集，用 7 位代码表示 128 个字符&lt;br&gt;
 char 类型的变量可以用任意单字符赋值&lt;/p&gt;
&lt;h5 id=&#34;字符操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符操作&#34;&gt;#&lt;/a&gt; 字符操作&lt;/h5&gt;
&lt;p&gt;C 语言将字符当做整数进行处理 毕竟所有的字符都是以二进制的形式进行编码的&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;char ch;
ch = 65      此时ch是A
ch = ch+1    此时ch是B
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;有符号字符和无符号字符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#有符号字符和无符号字符&#34;&gt;#&lt;/a&gt; 有符号字符和无符号字符&lt;/h5&gt;
&lt;p&gt;char 类型像整数类型一样存在符号性和无符号性两种 通常有符号型的取值是 - 128~127 而无符号字符的取值是 0~255&lt;br&gt;
 所有 C 语言允许单词 signed 和 unsigned 来修饰 char 类型&lt;/p&gt;
&lt;h4 id=&#34;算数类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#算数类型&#34;&gt;#&lt;/a&gt; 算数类型&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IQp6Ej&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQp6Ej.png&#34; alt=&#34;IQp6Ej.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;转义序列-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#转义序列-2&#34;&gt;#&lt;/a&gt; 转义序列&lt;/h4&gt;
&lt;p&gt;转义序列分为字符转义序列和数字转义序列&lt;/p&gt;
&lt;h5 id=&#34;字符转义序列&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符转义序列&#34;&gt;#&lt;/a&gt; 字符转义序列&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IQprDg&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQprDg.png&#34; alt=&#34;IQprDg.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;数字转义序列&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数字转义序列&#34;&gt;#&lt;/a&gt; 数字转义序列&lt;/h5&gt;
&lt;p&gt;字符转义序列没有包含所有无法打印的 ASCII 字符 字符转义序列也无法包含 128 个 ASICC 字符以外的字符 而数字转义字符可以表示任何字符 所有它可以解决上述问题&lt;/p&gt;
&lt;p&gt;作为字符常量来使用时，&lt;strong&gt; 转义序列必须用一堆单引号括起来&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;字符处理函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符处理函数&#34;&gt;#&lt;/a&gt; 字符处理函数&lt;/h4&gt;
&lt;p&gt;例如 toupper 函数可以将小写字母转化为大写字母 但要调用这类使用的字符处理函数 需要在顶部放置 #include &amp;lt;ctype.h&amp;gt; 这一条指令&lt;/p&gt;
&lt;h5 id=&#34;用scanf-和printf读写字符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#用scanf-和printf读写字符&#34;&gt;#&lt;/a&gt; 用 scanf 和 printf 读写字符&lt;/h5&gt;
&lt;p&gt;scanf 读写字符时 并不会跳过空白字符 为了强制 scanf 在读入字符前跳过空白字符，需要在格式串中的转换说明 % C 前面加上一个空格&lt;/p&gt;
&lt;h5 id=&#34;用getchar和putchar用于读写字符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#用getchar和putchar用于读写字符&#34;&gt;#&lt;/a&gt; 用 getchar 和 putchar 用于读写字符&lt;/h5&gt;
&lt;p&gt;getchar 函数和 putchar 函数可以用来取代 scanf 和 printf 函数 putchar 函数用于写单个字符&lt;br&gt;
每次调用时他会读写一个字符并将其返回 为了保存这个字符 必须使用赋值操作将其储存在变量中&lt;br&gt;
当混用 getchar 函数和 scanf 函数要小心 scanf 函数仅消耗掉匹配的输入数据 其余部分仍然留在缓冲区 (包括换行符)&lt;/p&gt;
&lt;h4 id=&#34;类型转换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#类型转换&#34;&gt;#&lt;/a&gt; 类型转换&lt;/h4&gt;
&lt;h5 id=&#34;隐式类型转换规则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#隐式类型转换规则&#34;&gt;#&lt;/a&gt; 隐式类型转换规则&lt;/h5&gt;
&lt;p&gt;较低级向较高级转换 (按存储长度)&lt;br&gt;
 其中有一个操作数是浮点型时 把整型操作数往浮点型转换 而浮点型往精度更高的浮点型转换&lt;br&gt;
两个操作数都不是浮点数时，如果有 char 或者 short int 类型 首先对两个操作数进行整型提升&lt;br&gt;
&lt;strong&gt;特例&lt;/strong&gt;:long int 和 unsigned int 数据类型长度相同时 则两个操作数均转换为 unsigned long&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IQ9FPI&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IQ9FPI.png&#34; alt=&#34;IQ9FPI.png&#34;&gt;&lt;/a&gt;&lt;br&gt;
 赋值中的类型转换：把赋值运算符右侧表达式的值转换为左侧变量的类型.&lt;/p&gt;
&lt;h5 id=&#34;强制类型转换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#强制类型转换&#34;&gt;#&lt;/a&gt; 强制类型转换&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;(类型)变量   eg(char)i  表示把i的类型强制转换为char的类型
(类型)(表达式)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;这些转换类型只是一次有效的 不会改变变量定义时的数据类型&lt;br&gt;
 C 语言把类型名视为一元运算符&lt;/p&gt;
&lt;h4 id=&#34;类型定义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#类型定义&#34;&gt;#&lt;/a&gt; 类型定义&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;typedef 数据类型 别名
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;用于对另一个数据类型创建一个别名&lt;br&gt;
注意并没有创建一个新的类型 仅仅是对某个已有的类型增加一个别名&lt;br&gt;
可以让程序更加易于理解 可读性更高&lt;/p&gt;
&lt;h4 id=&#34;sizeof-运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sizeof-运算符&#34;&gt;#&lt;/a&gt; sizeof 运算符&lt;/h4&gt;
&lt;p&gt;取数据类型 常量 变量或者表达式值得存储长度的运算符 (以字节为单位)&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;sizeof(数据类型说明符/表达式)
用于类型名 sizeof(类型名)
用于表达式 sizeof 表达式
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;第八章-字符输入输出和输入验证&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第八章-字符输入输出和输入验证&#34;&gt;#&lt;/a&gt; 第八章 字符输入 / 输出和输入验证&lt;/h3&gt;
&lt;h4 id=&#34;单字符io-getchar和putchar&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#单字符io-getchar和putchar&#34;&gt;#&lt;/a&gt; 单字符 I/O getchar () 和 putchar ()&lt;/h4&gt;
&lt;h4 id=&#34;缓冲区&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#缓冲区&#34;&gt;#&lt;/a&gt; 缓冲区&lt;/h4&gt;
&lt;p&gt;用户输入的字符被收集并存储在一个被称为缓冲区的临时存储区 按下 enter 键后 程序才可以使用用户输入的字符&lt;br&gt;
某些交互式系统无缓冲区 比如游戏中按下一个键需要立即执行按下的操作&lt;br&gt;
缓冲区分为完全缓冲和行缓冲&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;完全缓冲输入指的是当缓冲区被填满时才刷新缓冲区
行缓冲指的是在出现换行时刷新缓冲区(键盘输入)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;是否能进行无缓冲输入取决于计算机系统 大部分直接规定输入都会缓冲输入&lt;/p&gt;
&lt;h4 id=&#34;结束键盘输入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#结束键盘输入&#34;&gt;#&lt;/a&gt; 结束键盘输入&lt;/h4&gt;
&lt;h5 id=&#34;文件流和键盘输入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文件流和键盘输入&#34;&gt;#&lt;/a&gt; 文件，流和键盘输入&lt;/h5&gt;
&lt;h5 id=&#34;文件结尾&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文件结尾&#34;&gt;#&lt;/a&gt; 文件结尾&lt;/h5&gt;
&lt;p&gt;方法 1 文件末尾放置一个特殊字符 来标记末尾&lt;br&gt;
方法 2 存储文件大小的信息。如果程序有 3000 字节 那么程序在读到 3000 字节的时候便达到文件末尾&lt;/p&gt;
&lt;p&gt;在 C 语言中 用 getchar 或者 scanf 检测文件末尾时都将放回一个特殊值 即 EOF&lt;/p&gt;
&lt;h3 id=&#34;第九章函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第九章函数&#34;&gt;#&lt;/a&gt; 第九章函数&lt;/h3&gt;
&lt;h4 id=&#34;复习函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#复习函数&#34;&gt;#&lt;/a&gt; 复习函数&lt;/h4&gt;
&lt;h5 id=&#34;创建并使用简单函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建并使用简单函数&#34;&gt;#&lt;/a&gt; 创建并使用简单函数&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#define NAME &#34;GIGATHINK,INC&#34;
#define ADDRESS &#34;101 Megabuck plaza&#34;
#define PLACE &#34;MEGAPOLIS,CA 94904&#34;
#define WIDTH 40

void starbar(void);

int main(void)
{
    starbar();
    printf(&#34;%s \n&#34;, NAME);
    printf(&#34;%s \n&#34;, ADDRESS);
    printf(&#34;%s \n&#34;, PLACE);
    starbar(); //使用函数
    return 0;
}

void starbar(void) //定义函数
{
    int count;
    for (count = 1; count &amp;lt;= WIDTH; count++)
    {
        putchar(&#39;*&#39;);
    }
    putchar(&#39;\n&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;分析程序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分析程序&#34;&gt;#&lt;/a&gt; 分析程序&lt;/h5&gt;
&lt;p&gt;函数原型：告诉编译器函数的类型&lt;br&gt;
函数调用：表明在此处执行函数&lt;br&gt;
函数定义：明确地指出函数要做什么&lt;/p&gt;
&lt;p&gt;函数和变量有一样有多种类型 任何程序在使用函数之前都要声明该函数的类型&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;void starbar(void);
圆括号表示starbar是一个函数名 第一个void是函数类型 void类型表明函数没有返回值 第二个void(圆括号中)表明该函数不带参数。分号表示这是在申明函数不是在定义函数 
这行表明了程序将使用一个名为starbar(),没有返回值,没有参数的函数,并告诉编译器在别处查找该函数的定义
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;一般而言 函数原型指明了函数的返回值类型和函数接受的参数类型 这些信息称为函数的&lt;strong&gt;签名&lt;/strong&gt;&lt;br&gt;
这里对于 starbar () 函数而言 其签名是该函数没有返回值，没有参数&lt;br&gt;
 starbar () 原型放在任何位置都可以&lt;br&gt;
执行顺序:&lt;br&gt;
 在 main () 中 当计算机执行到 starbar () 函数时，会找到该函数的定义并执行其中的内容，执行完 starbar () 中的代码后，计算机返回主调函数继续执行下一行&lt;br&gt;
函数头包括函数类型，函数名和圆括号，接着是左花括号，变量声明，函数表达式语句，最后以又花括号结束&lt;br&gt;
 ** 注意函数头中的 starbar () 没有分号 这是在告诉编译器这是定义 starbar ()，而不是调用函数或者声明函数类型&lt;br&gt;
 starbar () 函数中的 count 变量是局部变量，意思是该变量只属于 starbar () 函数，可以在程序中的其他地方使用 count 这并不会引起名称冲突 他们是同名的不同函数&lt;/p&gt;
&lt;h5 id=&#34;函数参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数参数&#34;&gt;#&lt;/a&gt; 函数参数&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;void show_n_char(char ch,int num);   
shou_n_char(&#39;*&#39;,12)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;定义带形式参数的函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定义带形式参数的函数&#34;&gt;#&lt;/a&gt; 定义带形式参数的函数&lt;/h5&gt;
&lt;p&gt;第一行告知编译器 show_n_char 使用两个参数 ch 和 num,ch 是 char 类型 num 是 int 类型。这两个变量被称为形式参数，简称形参。和定义在函数中变量一样 形参也是局部变量属于该函数私有。这以为着在其他函数中使用同名变量不会引起名称冲突 每次调用函数 就会给这些变量赋值&lt;br&gt;
值得一提的是 虽然 show_n_char () 接受来自 main () 的值 但是它没有返回值。因此，show_n_char () 的类型是 void&lt;/p&gt;
&lt;h5 id=&#34;声明带形式参数函数的原型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#声明带形式参数函数的原型&#34;&gt;#&lt;/a&gt; 声明带形式参数函数的原型&lt;/h5&gt;
&lt;p&gt;使用函数之前要声明函数原型: void shou_n_char (char ch,int num) 当然根据个人喜好 你也可以省略变量名&lt;br&gt;
在原型中使用变量名并没有实际创建变量，char 仅代表了一个 char 类型的变量&lt;/p&gt;
&lt;h5 id=&#34;调用带实际参数的函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#调用带实际参数的函数&#34;&gt;#&lt;/a&gt; 调用带实际参数的函数&lt;/h5&gt;
&lt;p&gt;在函数的调用中 实际参数 (简称实参) 提供了 ch 和 num 的值 比如 show_n_char (’*’,12); 这两个值被赋值给函数中的形式参数&lt;br&gt;
简而言之形式参数是被调函数中的变量 实际参数是主调函数赋值给被调函数的具体值 实际参数可以是常量变量甚至是更复杂的表达式 无论实际参数是何种形式都要被求值 然后该值被拷贝给被调函数相应的形式参数.&lt;/p&gt;
&lt;h5 id=&#34;使用return从函数中返回值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用return从函数中返回值&#34;&gt;#&lt;/a&gt; 使用 return 从函数中返回值&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;int imin(int n , int m)
int imin(int n , int m)
{
int min ;
if (n&amp;lt;m) min=n;
else min = m;
return min;
}
int a = imin(1,2)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;关键字 return 后面的表达式的值就是函数的返回值 在该例中，函数的返回值就是变量 min 的值&lt;br&gt;
变量 min 属于 imin () 函数私有 但是 return 语句把 min 的值传回了主调函数&lt;br&gt;
 return; return 语句还可以这样使用 这样使用 retrun 语句将会终止函数并把控制返回给主调函数&lt;/p&gt;
&lt;h5 id=&#34;函数类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数类型&#34;&gt;#&lt;/a&gt; 函数类型&lt;/h5&gt;
&lt;p&gt;声明函数必须声明函数的类型 带返回值的函数类型应该与其返回值得类型相同 没有返回值的函数声明为 void 类型&lt;br&gt;
&lt;strong&gt;值得注意的是 函数类型指的是函数返回值的类型 而不是参数的类型&lt;/strong&gt;&lt;br&gt;
函数的前置声明可以放在主调函数外面也可以放在主调函数里面&lt;br&gt;
 ANSIC 标准库中，函数被封城了多个系列，每一个系列都有各自的头文件，这些头文件中包含了本系列所有函数的声明。例如 stdio.h 头文件中包括了标准的 I/O 库函数 (如 printf he scanf 函数) 的声明&lt;/p&gt;
&lt;h4 id=&#34;ansi-c-函数类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ansi-c-函数类型&#34;&gt;#&lt;/a&gt; ANSI C 函数类型&lt;/h4&gt;
&lt;p&gt;旨在说明老式声明函数的问题所在和解决方案 这里不做过多描述 可自行搜索&lt;/p&gt;
&lt;p&gt;ANSI C 使用了逗号分割的类型列表 eg imax (int a , int b) 如此 编译器可以检查函数调用是否和函数原型匹配 参数的数量是否匹配 参数的类型是否匹配&lt;/p&gt;
&lt;h5 id=&#34;无参数和未指定参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#无参数和未指定参数&#34;&gt;#&lt;/a&gt; 无参数和未指定参数&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;void print_name()
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;接受 ANSI C 的编译器截石位 print_name () 不接受任何参数，然后在调用该函数时，编译器会检查来确保没有使用参数&lt;/p&gt;
&lt;h5 id=&#34;函数原型的优点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数原型的优点&#34;&gt;#&lt;/a&gt; 函数原型的优点&lt;/h5&gt;
&lt;p&gt;使用函数原型会让编译器捕获在使用函数时可能出现的许多错误或疏漏，如果编译器没有发现这些问题，就很难觉察出来.&lt;br&gt;
 有一种方法可以省略函数原型却保留函数原型的优点&lt;br&gt;
把整个函数定义放在第一次调用该函数之前，也有相同的效果 此时函数定义也相当于函数原型。对于代码量较少的函数 这种用法很普遍&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;int imax(int a , int b ) {return a&amp;gt;b?a:b}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;递归&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#递归&#34;&gt;#&lt;/a&gt; 递归&lt;/h4&gt;
&lt;p&gt;C 允许函数调用他自己 这种调用过程称为&lt;strong&gt;递归&lt;/strong&gt;&lt;br&gt;
难点：结束递归 (如果递归代码中没有终止递归的条件测试部分，一个调用自己的函数就会无限递归)&lt;br&gt;
 注：可以使用循环的地方&lt;strong&gt;通常&lt;/strong&gt;都可以使用递归&lt;/p&gt;
&lt;h5 id=&#34;演示递归&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#演示递归&#34;&gt;#&lt;/a&gt; 演示递归&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IlPHk4&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IlPHk4.jpg&#34; alt=&#34;IlPHk4.jpg&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IlPbtJ&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/06/IlPbtJ.jpg&#34; alt=&#34;IlPbtJ.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;递归的基本原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#递归的基本原理&#34;&gt;#&lt;/a&gt; 递归的基本原理&lt;/h5&gt;
&lt;p&gt;1. 每级函数调用都有自己的变量 也就是说第一级的 n 和第二的 n 不一样 当程序最终返回第一级的时候 最初的 n 仍然是它的初值 1 (局部变量)&lt;br&gt;
 2. 每次幻术调用都会返回一次 当函数执行完毕后 控制权将被传回上一级递归。程序必须按照顺序逐级返回递归 不能跳级&lt;br&gt;
 3. 递归函数中位于递归调用之前的语句 均按被调函数的顺序执行&lt;br&gt;
 4. 递归函数中位于递归调用之后的语句 均按被调函数的&lt;strong&gt;相反&lt;/strong&gt;顺序执行&lt;br&gt;
 5. 虽然每级递归都有自己的变量 但是并没有拷贝函数的代码，所以程序按顺序执行函数中的代码 而递归调用就相当于又从头开始执行函数的代码 除了为每次递归调用创建变量外 递归调用非常类似于一个循环语句&lt;br&gt;
 6. 递归函数必须包含能让递归调用停止的语句。通常递归函数都使用 if 或者其他等价的测试条件在函数形参等于某个特定值时终止递归。为此 每次递归调用的形参都要使用不同的值&lt;/p&gt;
&lt;h5 id=&#34;尾递归&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#尾递归&#34;&gt;#&lt;/a&gt; 尾递归&lt;/h5&gt;
&lt;p&gt;将递归放置在函数的末尾 即正好在 return 语句之前 这种形式的递归被称为尾递归 相当于循环&lt;/p&gt;
&lt;h5 id=&#34;递归和倒序计算&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#递归和倒序计算&#34;&gt;#&lt;/a&gt; 递归和倒序计算&lt;/h5&gt;
&lt;p&gt;在处理这类倒序问题时  递归比循环简单&lt;/p&gt;
&lt;h5 id=&#34;递归的优缺点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#递归的优缺点&#34;&gt;#&lt;/a&gt; 递归的优缺点&lt;/h5&gt;
&lt;p&gt;优点：为某些编程问题提供了最简单的解决方案，缺点是一些递归算法会快速消耗计算机的内存资源 另外递归不方便阅读和维护&lt;br&gt;
&lt;strong&gt;在程序中使用递归要格外注意 尤其是效率优先的程序&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;编译多源代码文件的程序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#编译多源代码文件的程序&#34;&gt;#&lt;/a&gt; 编译多源代码文件的程序&lt;/h4&gt;
&lt;p&gt;使用多个函数最简单的方法是把他们都放在同一个文件中 然后像编译只有一个函数的文件那样编译该文件即可。其他方法因操作系统而异，下面将举例说明.&lt;/p&gt;
&lt;h5 id=&#34;unix&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#unix&#34;&gt;#&lt;/a&gt; UNIX&lt;/h5&gt;
&lt;p&gt;假设 filel.c 和 file2.c 是两个内涵 C 函数的文件 下面的命令将编译两个文件并生成一个名为 a.out 的可执行文件:&lt;br&gt;
cc filel.c file2.c&lt;br&gt;
 另外还生成两个名为 file1.o 和 file2.o 的目标文件。如果后来改动了 filel.c 而 file2.c 不变 可以使用以下命令编译第一个文件 并与第二个文件的目标代码合并&lt;br&gt;
 cc filel.c file2.o&lt;/p&gt;
&lt;h5 id=&#34;linux&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#linux&#34;&gt;#&lt;/a&gt; Linux&lt;/h5&gt;
&lt;p&gt;假定 linux 系统安装了 GNU C 编译器 GCC 假设 filel.c 和 file2.c 是两个内含 C 函数的文件 下面的命令将编译两个文件并生成名为 a.out 的可执行文件&lt;br&gt;
 gcc filel.c file2.c&lt;br&gt;
 另外还生成两个名为 file1.o 和 file2.o 的目标文件。如果后来改动了 filel.c 而 file2.c 不变 可以使用以下命令编译第一个文件 并与第二个文件的目标代码合并&lt;br&gt;
 gcc filel.c file2.o&lt;/p&gt;
&lt;h5 id=&#34;dos命令行编译器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dos命令行编译器&#34;&gt;#&lt;/a&gt; DOS 命令行编译器&lt;/h5&gt;
&lt;p&gt;绝大多数 DIS 命令行编译器的工作员刘和 UNIX 的 CC 命令类似 只不过使用不同的名称而已 其中一个区别是 对象文件的扩展名是.obj 而不是.o 一些编译器生成的不是目标代码文件 而是汇编语言或其他特殊代码的中间文件&lt;/p&gt;
&lt;h5 id=&#34;windows和苹果的ide编译器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#windows和苹果的ide编译器&#34;&gt;#&lt;/a&gt; windows 和苹果的 IDE 编译器&lt;/h5&gt;
&lt;p&gt;windows 和 Macintosh 系统使用的集成开发环境中的编译器是面向项目的&lt;br&gt;
项目 描述的是特定程序使用的资源 (资源包括源代码文件)&lt;br&gt;
 这种 IDE 中的编译器要创建项目来运行单文件程序 对于多文件程序 要使用相应的菜单命令 把源代码文件加入到一个项目中 要确保所有的源代码文件都在项目列表中列出 许多 IDE 都不用在项目列表中列出头文件 (扩展名为.h 的文件) 因为项目只管理使用的源代码文件源代码文件中的 #include 指令管理该文件中使用的头文件 但是 Xcode 要在项目中添加头文件&lt;/p&gt;
&lt;h5 id=&#34;使用头文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用头文件&#34;&gt;#&lt;/a&gt; 使用头文件&lt;/h5&gt;
&lt;p&gt;如果把 main () 放在第一个文件中 把函数定义放在第二个文件中 那么第一个文件仍然要使用函数原型&lt;br&gt;
把函数原型放在头文件中 就不用再每次使用函数文件时都要写出函数的原型&lt;/p&gt;
&lt;h4 id=&#34;查找地址-运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查找地址-运算符&#34;&gt;#&lt;/a&gt; 查找地址: &amp;amp; 运算符&lt;/h4&gt;
&lt;p&gt;指针是 C 语言中最重要的概念之一 用于存储变量的地址。前面使用的 scanf () 函数中就是用地址最为参数&lt;br&gt;
一元运算符 &amp;amp; 给出变量的存储地址，如果 posh 是变量名那么 &amp;amp; posh 就是变量的地址 可以把地址看做是变量在内存中的位置&lt;br&gt;
不同的变量所处的位置是不同的&lt;/p&gt;
&lt;h4 id=&#34;更改主调函数中的变量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#更改主调函数中的变量&#34;&gt;#&lt;/a&gt; 更改主调函数中的变量&lt;/h4&gt;
&lt;p&gt;例如要更改两个数 x,y 的位置 简单地 x = y, y = x 并没有作用&lt;br&gt;
下面实现简单地交换值得功能&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;void interchange(int u ,int v ) {
int temp;
temp = u
u = v
v = temp
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然这个函数表面上实现了交换的功能 但事实上 调用函数输出结果的时候 并不会交换这两个数值&lt;br&gt;
因为在 interchange () 传回的变量并不是 main () 中的变量 (局部变量问题：在函数中的变量虽然表面上和 main 中的变量一样 但是实际上这两个变量是完全不同的 存储地址也不一样的两个变量). 因此交换 u 和 v 的值 对 x 和 y 的值没有影响&lt;br&gt;
可以使用 return 语句把值传回 main () 比如 在函数末尾加上 return (u), 然后修改 main 中而定调用 x = interchange (x,y) 但是这只能改变 x 的值 return 语句只能把被调函数中的一个值传回主调函数 但是现在要传回两个值 这就需要指针了 下面开始概述指针&lt;/p&gt;
&lt;h4 id=&#34;指针简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#指针简介&#34;&gt;#&lt;/a&gt; 指针简介&lt;/h4&gt;
&lt;p&gt;指针：一个值为内存地址的变量 (或数据对象)&lt;br&gt;
&lt;strong&gt; 例如:int 类型变量的值为整数 char 类型变量的值为字符 而指针变量的值为地址&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;ptr = &amp;amp;pooh
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;其中 表示 ptr&#34;指向&#34;pooh ptr 和 &amp;amp; pooh 的区别是 ptr 是变量 而 &amp;amp;pooh 是常量&lt;br&gt;
这样 ptr 的值 就是 pooh 的地址&lt;br&gt;
创建指针变量 要先声明指针变量的类型&lt;/p&gt;
&lt;h5 id=&#34;间接运算符解引用运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#间接运算符解引用运算符&#34;&gt;#&lt;/a&gt; 间接运算符 (解引用运算符) *&lt;/h5&gt;
&lt;p&gt;间接运算符可以找出存储在内存地址下的值&lt;br&gt;
注意分清楚 间接运算符 和 二元乘号运算符 虽然他们长得一样&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;val = *ptr
ptr = &amp;amp;bhb
上面这串代码就相当于是 val = bhb
&amp;amp;后跟一个变量名 表示该变量名的地址
*后跟一个地址 或者指针名 表示存储在指针指向地址上的值
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;声明指针&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#声明指针&#34;&gt;#&lt;/a&gt; 声明指针&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;int * pi         pi是指向int类型变量的指针
char * p         p是指向char类型变量的指针
float * pf,*pg   pf,pg是指向float类型变量的指针
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;其中 * 表明声明的变量是一个指针 前面表示指针指向的类型&lt;br&gt;
 pi 指向的值是 int 类型 pi 本身叫做 指向 int 类型的指针 pi 的值是一个地址&lt;/p&gt;
&lt;h5 id=&#34;使用指针在函数间通信&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用指针在函数间通信&#34;&gt;#&lt;/a&gt; 使用指针在函数间通信&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;void interchange(int * u, int * v)
{
int temp;
temp = *u;
*u = *v;
*v = temp;
}
interchange(&amp;amp;x,&amp;amp;y)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;该函数传递的就不是 x 和 y 的值 而是存储 x 和 y 的值的地址&lt;br&gt;
函数中的第二个语句表示 把 u 地址中的值给 temp 第三个语句表示把 V 地址中存储的值赋值给 U 这样 U 地址存储的值变成了 V 地址存储的值第四个语句同样&lt;/p&gt;
&lt;h5 id=&#34;小结来自c-primer-plus&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#小结来自c-primer-plus&#34;&gt;#&lt;/a&gt; 小结 (来自 C primer Plus)&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/IlXp9K&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/07/IlXp9K.jpg&#34; alt=&#34;IlXp9K.jpg&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IlOxtx&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/07/IlOxtx.jpg&#34; alt=&#34;IlOxtx.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;关键概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#关键概念&#34;&gt;#&lt;/a&gt; 关键概念&lt;/h4&gt;
&lt;p&gt;想用 C 编出高效灵活的程序，必须理解函数.&lt;br&gt;
 函数是如何把信息从一个函数传递到另一函数 理解函数参数和返回值之间的工作原理&lt;br&gt;
明白函数形参和其他局部变量属于函数私有因此 声明在不同函数中的同名变量是完全不同的变量&lt;br&gt;
函数无法直接访问在其他函数中的变量 这样限制访问保护了数据的完整性&lt;br&gt;
但是 当确实需要在函数中访问另一个函数的数据时 可以把指针作为函数的参数&lt;/p&gt;
&lt;h4 id=&#34;本章小结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#本章小结&#34;&gt;#&lt;/a&gt; 本章小结&lt;/h4&gt;
&lt;p&gt;函数使用参数把值传给函数 使用关键字 return 把值返回函数 必须在函数定义和函数原型中指定函数的原型，如果需要在被调函数中修改主调函数的变量，使用地址或指针作为参数&lt;br&gt;
 ANSI C 提供了函数原型 允许编译器验证函数调用中使用的参数个数和类型是否正确&lt;br&gt;
 C 函数可以调用本身 即递归 一些编程问题要用递归来解决 但是递归消耗内存多 效率不高 而且费时&lt;/p&gt;
&lt;h3 id=&#34;第十章数组和指针&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第十章数组和指针&#34;&gt;#&lt;/a&gt; 第十章数组和指针&lt;/h3&gt;
&lt;h4 id=&#34;数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组&#34;&gt;#&lt;/a&gt; 数组&lt;/h4&gt;
&lt;p&gt;数组：数据类型相同的一系列元素组成 通过声明告诉编译器数组中含有多少元素和这些元素的类型&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;float candy[365];
char code[12];
int states[50];
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;方括号中的数组是数组中的元素个数.&lt;br&gt;
 访问数组中的元素通过数组索引表示数组中的各元素。数组元素的标号从 0 开始 &#39;candy [0]&#39; 表示 candy 数组的第一个元素&lt;/p&gt;
&lt;h5 id=&#34;初始化数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#初始化数组&#34;&gt;#&lt;/a&gt; 初始化数组&lt;/h5&gt;
&lt;p&gt;标量变量：只存储单个值的变量&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;int fix = 1 ;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;C 语言用新的语法来初始化数组&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;int power[8] = {1,2,4,6,8,6,4,2}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;用以逗号分隔的值列表 (用花括号括起来) 来初始化数组，各值之间用逗号分割.&lt;br&gt;
 使用 const 声明数组:&lt;br&gt;
 有时需要把数组设置为只读，如此 程序只能从数组中检索值，不能把新值写入数组，此时就应该用 const 声明和初始化数组&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;const int days[12] = {31,28,31,30,31,30,31,31,30,31,30,31}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;使用数组之前必须初始化&lt;/strong&gt;&lt;br&gt;
当初始化列表中的值少于数组元素个数时，编译器会把剩余的元素都初始化为 0, 但是如果不初始化数组，数组中存储的将会是不确定的垃圾值.&lt;br&gt;
 但是如果初始化列表中的值多于数组元素个数时候编译器会进行报错&lt;br&gt;
如果省略方括号中的数组编译器会根据初始化列表中的项数来确定数组的大小&lt;br&gt;
通常使用 sizeof 运算符给出他的运算对象的大小 (单位为字节)&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;int days[] = {1,2,3};
sizeof days[0] 表示数组中第一个元素的字节大小 //这里是4字节 因为一个int类型占据4字节
sizeof days 表示数组中所有元素所占的字节大小
我们通常使用数组中所有元素所占的字节大小来除以每一个元素的字节大小 得到数组中的元素数目
sizeof days / sizeof days[0]
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;指定初始化器c99&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#指定初始化器c99&#34;&gt;#&lt;/a&gt; 指定初始化器 (C99)&lt;/h5&gt;
&lt;p&gt;C99 增加的新特性：指定初始化器 利用该特性可以初始化指定的数组元素&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;int arr[6] = {[5]=212}; 把arr[5]初始化为212
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;在初始化一个元素后 未初始化的元素都会被设置为 0&lt;br&gt;
 如果初始化器后面有更多的值&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;[4] = 31,32,33   在days[4]被转化成31后 后面的数组会根据顺序转化 也就是说days[5]=32 以此类推
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果再次初始化元素 最后的初始化将会取代前面的初始化&lt;br&gt;
数组中除了指定的初始化元素，其他的将会按照顺序排序&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int days [12] = {31,28,[4]=31} 此时 days [0] 就是 31 days [1] 就是 28&lt;br&gt;
 如果没有指定元素大小 例如  int days [] = {[1]=2}&lt;br&gt;
 此时园一期会把数组的大小设置为足够装得下初始化的值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;给数组元素赋值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#给数组元素赋值&#34;&gt;#&lt;/a&gt; 给数组元素赋值&lt;/h5&gt;
&lt;p&gt;AA&lt;br&gt;
 声明数组后，可以借助数组下标 (或索引) 给数组元素赋值&lt;br&gt;
 C 语言中只能使用循环给数组的元素依次赋值 不允许把数组作为一个单元赋给另一个数组&lt;br&gt;
只有初始化允许使用花括号列表的形式赋值&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;int yaks[5];
yaks[5] = {1,2,3,4,5};
这样赋值是不起作用的
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;数组边界&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组边界&#34;&gt;#&lt;/a&gt; 数组边界&lt;/h5&gt;
&lt;p&gt;使用数组时，必须确保下标是有效的值 不能超出边界&lt;br&gt;
编译器不会检查数组下标是否使用得当，结果是未定义的&lt;/p&gt;
&lt;h5 id=&#34;指定数组的大小&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#指定数组的大小&#34;&gt;#&lt;/a&gt; 指定数组的大小&lt;/h5&gt;
&lt;p&gt;声明数组只能在在方括号中使用整型常量表达式 另外表达式的值必须大于 0&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/IBGPoQ&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/12/IBGPoQ.jpg&#34; alt=&#34;IBGPoQ.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;多维数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多维数组&#34;&gt;#&lt;/a&gt; 多维数组&lt;/h4&gt;
&lt;p&gt;声明:flaot rain [5][12]; //rain 是一个内涵 5 个元素的数组 每个元素的类型都是 float [12]&lt;br&gt;
 rain 的每个元素本身都是一个内涵 12 个 float 类型值的数组&lt;br&gt;
例如:rain [0][0] 表示 rain 中的首个元素数组的首个元素&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#define MONTHS 12    // number of months in a year
#define YEARS   5    // number of years of data
int main(void)
{
    // initializing rainfall data for 2010 - 2014
    const float rain[YEARS][MONTHS] =
    {
        {4.3,4.3,4.3,3.0,2.0,1.2,0.2,0.2,0.4,2.4,3.5,6.6},
        {8.5,8.2,1.2,1.6,2.4,0.0,5.2,0.9,0.3,0.9,1.4,7.3},
        {9.1,8.5,6.7,4.3,2.1,0.8,0.2,0.2,1.1,2.3,6.1,8.4},
        {7.2,9.9,8.4,3.3,1.2,0.8,0.4,0.0,0.6,1.7,4.3,6.2},
        {7.6,5.6,3.8,2.8,3.8,0.2,0.0,0.0,0.0,1.3,2.6,5.2}
    };
    int year, month;
    float subtot, total;
    
    printf(&#34; YEAR    RAINFALL  (inches)\n&#34;);
    for (year = 0, total = 0; year &amp;lt; YEARS; year++)
    {             // for each year, sum rainfall for each month
        for (month = 0, subtot = 0; month &amp;lt; MONTHS; month++)
            subtot += rain[year][month];
        printf(&#34;%5d %15.1f\n&#34;, 2010 + year, subtot);
        total += subtot; // total for all years
    }
    printf(&#34;\nThe yearly average is %.1f inches.\n\n&#34;,
           total/YEARS);
    printf(&#34;MONTHLY AVERAGES:\n\n&#34;);
    printf(&#34; Jan  Feb  Mar  Apr  May  Jun  Jul  Aug  Sep  Oct &#34;);
    printf(&#34; Nov  Dec\n&#34;);
            
    for (month = 0; month &amp;lt; MONTHS; month++)
    {             // for each month, sum rainfall over years
        for (year = 0, subtot =0; year &amp;lt; YEARS; year++)
            subtot += rain[year][month];
        printf(&#34;%4.1f &#34;, subtot/YEARS);
    }
    printf(&#34;\n&#34;);
            
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;重点学习数组初始化和计算方案&lt;/p&gt;
&lt;h5 id=&#34;初始化二维数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#初始化二维数组&#34;&gt;#&lt;/a&gt; 初始化二维数组&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;sometype arl[5] = {val1,val2,val3,val4,val5}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;val1 等是 sometype 类型的值&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;    const float rain[YEARS][MONTHS] =
    {
        {4.3,4.3,4.3,3.0,2.0,1.2,0.2,0.2,0.4,2.4,3.5,6.6},
        {8.5,8.2,1.2,1.6,2.4,0.0,5.2,0.9,0.3,0.9,1.4,7.3},
        {9.1,8.5,6.7,4.3,2.1,0.8,0.2,0.2,1.1,2.3,6.1,8.4},
        {7.2,9.9,8.4,3.3,1.2,0.8,0.4,0.0,0.6,1.7,4.3,6.2},
        {7.6,5.6,3.8,2.8,3.8,0.2,0.0,0.0,0.0,1.3,2.6,5.2}
    };
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;初始化时候可以省略内部的花括号只需要保存最外部的花括号就行了，前提是每个元素都必须写上 并且数目不足，像这样内外花括号 可以使 元素书小于定义数时 编译器自动以 0 填充&lt;br&gt;
如果省略内部花括号 编译器会按照先后顺序逐行初始化 直到用完所有的值，后面没有初始化元素被统一初始化为 0&lt;/p&gt;
&lt;h5 id=&#34;其他多维数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#其他多维数组&#34;&gt;#&lt;/a&gt; 其他多维数组&lt;/h5&gt;
&lt;p&gt;三维数组: int box [10][20][30];&lt;br&gt;
 一维数组是一行数据 二维数组是数据表 三维数组是一叠数据表&lt;br&gt;
处理几维数组就需要使用到几维嵌套循环&lt;/p&gt;
&lt;h4 id=&#34;指针和数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#指针和数组&#34;&gt;#&lt;/a&gt; 指针和数组&lt;/h4&gt;
&lt;p&gt;系统中 地址按字节编扯，short 类型占用 2 字节等；在 C 中 指针加 1 指的是增加一个存储单元。对数组而言 这意味着 + 1 后的地址是下一个元素的地址；而不是下一个字节的地址 这卆为什么必须声明指针所指对象类型的原因之一 自算计要知道存储对象需要多少字节&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;dates+2 == &amp;amp;dates[2];
*(dates+2) ==dates[2];
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;** 注意间接运算符 * 的优先级要大于 +** 所以这里必须打括号&lt;/p&gt;
&lt;p&gt;例如数组名是 days   那么 days 也表示数组首元素的地址&lt;/p&gt;
&lt;h4 id=&#34;函数数组和指针&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数数组和指针&#34;&gt;#&lt;/a&gt; 函数，数组和指针&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;int sum(int * ar,int n)
{
int i;
int total 0;
for(i=0;i&amp;lt;n;i++)
total +=ar[i] 或者 *( ar + i );
return total;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一个形参告诉该函数数组的地址和数据类型 第二个形参告诉函数该数组中的元素个数&lt;br&gt;
关于函数的形参 还有一点要注意 只有在函数原型或函数定义头中才可以用 int ar [] 来代替 int * ar;&lt;br&gt;
int * ar 和 int ar [] 都表示 ar 是一个指向 int 的指针 但是 int ar [] 只能用于声明形式函数但是他可以提醒读者 ar 指向的不仅仅是一个 int 类型值还是一个 int 类型数组的元素&lt;br&gt;
函数原型可以省略参数名&lt;br&gt;
但是在函数定义中不能省略参数名&lt;br&gt;
我们的系统中用 8 字节存储地址 所以指针变量的大小是 8 字节 (其他系统中地址的大小可能不是 8 字节)&lt;/p&gt;
&lt;h5 id=&#34;使用指针形参&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用指针形参&#34;&gt;#&lt;/a&gt; 使用指针形参&lt;/h5&gt;
&lt;p&gt;函数要处理数组必须知道何时开始，何时结束&lt;br&gt;
上面 sum 函数用一个整数形参表示待处理元素的元素个数和数据类型 但是这并不是给函数传递必备信息的唯一方法&lt;br&gt;
还有一种方法是传递两个指针 第 1 个指针指明数组的开始处 (与前面用法相同), 第 2 个指针指明数组的结束处.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#define SIZE 10
int sump(int * start, int * end);
int main(void)
{
    int marbles[SIZE] = {20,10,5,39,4,16,19,26,31,20};
    long answer;
    
    answer = sump(marbles, marbles + SIZE);
    printf(&#34;The total number of marbles is %ld.\n&#34;, answer);
            
    return 0;
}

/* use pointer arithmetic   */
int sump(int * start, int * end)
{
    int total = 0;
    
    while (start &amp;lt; end)
    {
        total += *start; // add value to total
        start++;         // advance pointer to next element
    }
            
    return total;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;指针 start 指向 marbles 数组的首元素 所以赋值表达式 total += *start 把首元素 (20) 加给 total 然后表达式 start++ 递增指针变量 start 使其指向数组的下一个元素 因为 start 是指向 int 的指针 start 递增 1 相当于其值递增 int 类型的大小&lt;br&gt;
注意这里 sump () 函数用另一种方法结束加法循环 sump () 函数使用第二个指针 start &amp;lt; end 来结束循环&lt;br&gt;
 whild 循环的测试条件是一个不相等的关系 所以循环最后处理的一个元素是 end 所指向位置的前一个元素 这意味着 end 指向的位置实际上在数组最后一个元素后面 C 保证在给数组分配空间时 之下宁数组后面第一个位置的指针仍然是有效的指针 这使得 while 循环的测试条件是有效的，因为 start 在循环最后的值是 end&lt;br&gt;
answer = sump(marbles, marbles + SIZE);&lt;br&gt;
 下标从 0 开始 marbles+SIZE 指向数组末尾的下一个位置 如果 end 指向数组的最后一个元素而不是数组末尾的下个位置 则必须 - 1&lt;br&gt;
 这种写法不简洁也不好记 很容易导致标称错误&lt;br&gt;
 **C 语言虽然保证了 marbles+SIZE 有效 但是对 marbles [SIZE](即存储在该位置上的值) 未作任何保证 所以程序不能访问该位置&lt;br&gt;
循环体可以压缩成一行代码 total += *start++;&lt;br&gt;
* 和 ++ 的优先级相同 结合律是从右往左 所以 start++ 先求值 然后才是 * start 也就是说 start 先递增后指向 使用后缀形式 start++ 而不是 ++start 意味着先把指针指向位置上的值加到 total 上然后再递增指针切记 (*start)++ 是完全错误的这表示先使用 start 指向的指 然后再递增该值 而不是递增指针 这样指针将一直指向同一个位置 但是在该位置上的值发生了变化 虽然 * start++ 的写法比较常用 但是 *(start++) 这样写更清楚&lt;/p&gt;
&lt;h5 id=&#34;指针表示法和数组表示法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#指针表示法和数组表示法&#34;&gt;#&lt;/a&gt; 指针表示法和数组表示法&lt;/h5&gt;
&lt;p&gt;对于 C 语言而言 ar [i\ 和 *(ar + i) 这两个表达式都是等价的无论 ar 是数组名还是指针变量 这两个表达式都没问题 但是只要有当 ar 是指针变量的时候才能使用 arr++ 这样的表达式&lt;br&gt;
指针表示法更接近机器语言 因此一些编译器在编译时能生成效率更高的代码&lt;/p&gt;
&lt;h4 id=&#34;指针操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#指针操作&#34;&gt;#&lt;/a&gt; 指针操作&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;赋值&lt;/strong&gt;：可以把地址赋给指针 注意地址应该和指针类型兼容 也就是说不能把 double 类型的地址赋给指向 int 的指针至少要避免不明智的类型转换 C99/C11 已经不云讯这样做&lt;br&gt;
&lt;strong&gt;解引用&lt;/strong&gt;:* 运算符给出指针指向地址上存储的值&lt;br&gt;
&lt;strong&gt;取址&lt;/strong&gt;：和所有变量一样指针变量也有自己的地址和值 同样使用 &amp;amp; 给出指针本身的地址&lt;br&gt;
&lt;strong&gt;指针和整数相加&lt;/strong&gt;：可以使用 + 运算符把指针和整数相加 或整数和指针相加 无论哪种情况 整数都会和指针指向类型的大小 (以字节为单位) 相乘然后把结果和初始位置相加 如果相加的结果超出了初始指针指向的数组范围 计算结果则是未定义的 除非正好超过数组末尾第一个位置&lt;br&gt;
&lt;strong&gt;递增指针&lt;/strong&gt;：递增指向数组元素的指针可以让该指针移动至数组的下一个元素，但是指针自己的地址是不会发生变化的毕竟变量不会因为值发生变化就移动位置&lt;br&gt;
&lt;strong&gt;指针减去一个整数&lt;/strong&gt;：大概和加法相同 但是这里和加法不同 &lt;strong&gt;指针必须是第 1 个运算对象 整数是第 2 个运算对象&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;递减指针&lt;/strong&gt;：类比递增指针&lt;br&gt;
&lt;strong&gt;指针求差&lt;/strong&gt;：通常求差的两个指针分别指向同一个数组的不同元素，通过计算求出两元素之间的距离 差值的单位和数组类型的单位相同 只要两个指针都指向相同的数组 (或者其中一个指针指向数组后面的第 1 个地址) C 都能保证相减运算有效&lt;br&gt;
&lt;strong&gt;比较&lt;/strong&gt;使用关系运算符可以比较两个指针的值 前提是两个指针都指向相同类型的对象&lt;br&gt;
&lt;strong&gt; FBI WARNING 注意注意注意注意注意注意注意注意注意注意 FBI WARNING&lt;/strong&gt;&lt;br&gt;
 这里的减法有两种 一个指针减去另一个指针得到一个整数 或者用一个指针减去一个整数得到另一个指针&lt;br&gt;
递增递减指针时还要注意一些问题 编译器不会检查指针是否指向数组元素 C 只能保证指向数组任意元素的指针和指向数组后面第一个位置的指针有效。但是如果递增或者递减一个指针后超出了这个范围则是未定义的 另外 可以解引用指向数组任意元素的指针但是即使指针指向数组后面一个位置是有效的也不能保证可以解引用这样的越界指针&lt;br&gt;
创建一个指针时 系统只分配了存储指针本身的内存 并未分配存储数据的内存在使用指针之前必须先用已分配的地址初始化它&lt;/p&gt;
&lt;h4 id=&#34;处理数组中的数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#处理数组中的数据&#34;&gt;#&lt;/a&gt; 处理数组中的数据&lt;/h4&gt;
&lt;p&gt;C 通常都按值传递数据 因为这样做可以保证数据的完整性 如果函数使用的是原始数据的副本 就不会意外修改原始数据 但是处理数组的函数通常都需要使用原始数据因此这样的函数可以修改原数组 有时这正是我们需要的&lt;br&gt;
然而其他函数并不需要修改数据 这样变成错误就可能会破坏原始数据&lt;/p&gt;
&lt;h5 id=&#34;对形式参数使用const&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对形式参数使用const&#34;&gt;#&lt;/a&gt; 对形式参数使用 const&lt;/h5&gt;
&lt;p&gt;ANSI C 提供了一种预防手段 如果函数的意图不是修改数组中的数据内容 那么在函数原型和函数定义中声明形式参数时使用关键字 const&lt;br&gt;
 这样如果在函数中不小心使用了错误的表达式使原数组发生了改变，编译器会捕获这个错误并且生成一条错误信息.&lt;br&gt;
 使用 const 并不是要求原数组是常量而是该函数在处理数组时将其视为常量不可更改&lt;br&gt;
一般而言如果编写的函数不用修改数组 那么在声明数组形参时最好使用 const&lt;/p&gt;
&lt;h5 id=&#34;const的其他内容&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#const的其他内容&#34;&gt;#&lt;/a&gt; const 的其他内容&lt;/h5&gt;
&lt;p&gt;虽然用 #define 指令可以创建类似功能的符号常量 但是 const 的用法更加灵活 可以创建 const 数组 const 指针和指向 const 的指针&lt;br&gt;
指向 const 的指针通常用语函数形参中 表明该函数不会使用指针改变数据&lt;br&gt;
把 const 数据或非 const 数据的地址初始化为指向 const 的指针或为其赋值是合法的&lt;br&gt;
然后只能把非 const 数据的地址赋给普通指针&lt;br&gt;
因此对函数的形参使用 const 不仅能保护数据 还能让函数处理 const 数组&lt;br&gt;
 C 标准规定使用非 const 标识符改修 const 数据导致的结果是未定义的&lt;br&gt;
 const 还可以声明并初始化一个&lt;strong&gt;不能指向别处&lt;/strong&gt;的指针&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;double rates[5] = {};
double * const pc = rates;
pc = &amp;amp;rates[2]; 不逊于 因为该指针不能指向别处
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以用这种指针修改它所指向的值 但是它只能指向初始化时设置的地址&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;const double * const pc = rates;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;在创建指针时使用两次 const 该指针既不能更改他所指向的地址 也不能更改它所指向地址上的值&lt;/p&gt;
&lt;h4 id=&#34;指针和多维数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#指针和多维数组&#34;&gt;#&lt;/a&gt; 指针和多维数组&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;int zippo[4][2];  /内涵int数组的数组/
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;数组名 zippo 是该数组首元素的地址 zippo 的首元素一个内含 2 个 int 值得数组 所以 zippo 是这个内涵两个 int 值的数组的地址&lt;/li&gt;
&lt;li&gt;zippo 是数组首元素的地址 zippo [0] 那么就是数组首元素数组的首元素的值 zippo [0] 是一个占用一个 int 大小对象的地址 而 zippo 是一个占用两个 int 大小对象的地址 由于这个整数和内涵两个整数的数组都开始与同一个地址所以 zippo 和 zippo [0] 的值相同&lt;/li&gt;
&lt;li&gt;给指针或地址加 1 其值会增加对应类型的大小 &lt;strong&gt;在这方面 zippo 和 zippo [0] 不同&lt;/strong&gt; 因为 zippo 指向的对象占用了两个 int 大小 而 zippo [0] 指向的的对象只占用一个 int 大小&lt;/li&gt;
&lt;li&gt;在解引用一个指针或在数组名后使用带下标的 [] 运算符，得到解引用对象代表的值 *zippo 代表的是 zippo 首元素的值 而 zippo 首元素的值是一个数组那么这个数组的值就是 zippo 首元素数组的首元素的地址 这样来说 **zippo 和 *&amp;amp;zippo [0][0] 等价简而言之 zippo 是地址的地址，必须解引用两次才能获得原始值 地址的地址 或者指针的指针就是双重间接&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
int main(void)
{
     int zippo[4][2] = { { 2, 4 }, { 6, 8 }, { 1, 3 }, { 5, 7 } };

     printf(&#34;   zippo = %p,    zippo + 1 = %p\n&#34;,zippo, zippo + 1);
     printf(&#34;zippo[0] = %p, zippo[0] + 1 = %p\n&#34;,zippo[0], zippo[0] + 1);
     printf(&#34;  *zippo = %p,   *zippo + 1 = %p\n&#34;,*zippo, *zippo + 1);
     printf(&#34;zippo[0][0] = %d\n&#34;, zippo[0][0]);
     printf(&#34;  *zippo[0] = %d\n&#34;, *zippo[0]);
     printf(&#34;    **zippo = %d\n&#34;, **zippo);
     printf(&#34;      zippo[2][1] = %d\n&#34;, zippo[2][1]);
     printf(&#34;*(*(zippo+2) + 1) = %d\n&#34;, *(*(zippo + 2) + 1));
        
     return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;完整理解整个程序的输出结果&lt;/strong&gt;&lt;br&gt;
特别注意与 zippo [2][1] 等价的指针表示法是 *(*(zippo+2)+1)&lt;br&gt;
 这张视图演示了数组地址 数组内容和指针之间的关系&lt;br&gt;
&lt;a href=&#34;https://imgtu.com/i/Ic4B0s&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/14/Ic4B0s.png&#34; alt=&#34;Ic4B0s.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;指向多维数组的指针&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#指向多维数组的指针&#34;&gt;#&lt;/a&gt; 指向多维数组的指针&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;int (*pz) [2]  //表示pz指向一个内含两个int类型值得数组
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上代码把 pz 声明为指向一个数组的指针 该数组含有两个 int 类型值&lt;br&gt;
&lt;strong&gt;括号的原因是 [] 的优先级高于 *&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;int * pax[2]   此时pax是一个内涵两个指针元素的数组 每个元素都指向int的指针
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
int main(void)
{
     int zippo[4][2] = { { 2, 4 }, { 6, 8 }, { 1,   &amp;gt;     3 }, { 5, 7 } };
     int(*pz)[2];
     pz = zippo;

     printf(&#34;   pz = %p,    pz + 1 = %p\n&#34;,    pz,   &amp;gt;     pz + 1);
     printf(&#34;pz[0] = %p, pz[0] + 1 = %p\n&#34;,    pz  &amp;gt;     [0], pz[0] + 1);
     printf(&#34;  *pz = %p,   *pz + 1 = %p\n&#34;,      &amp;gt;     *pz, *pz + 1);
     printf(&#34;pz[0][0] = %d\n&#34;, pz[0][0]);
     printf(&#34;  *pz[0] = %d\n&#34;, *pz[0]);
     printf(&#34;    **pz = %d\n&#34;, **pz);
     printf(&#34;      pz[2][1] = %d\n&#34;, pz[2][1]);
     printf(&#34;*(*(pz+2) + 1) = %d\n&#34;, *(*(pz + 2) +   &amp;gt;     1));
        
     return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然 pz 是一个指针 不是数组名但是也可以用 pz [2][1] 这样的写法 可以用数组表示法或指针表示法来表示一个数组元素 既可以用数组名 也可以用指针名&lt;/p&gt;
&lt;h5 id=&#34;指针的兼容性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#指针的兼容性&#34;&gt;#&lt;/a&gt; 指针的兼容性&lt;/h5&gt;
&lt;p&gt;指针之间的赋值比数值类型之间的赋值要严格&lt;br&gt;
不用类型转换就可以吧 int 类型的值赋给 double 类型的变量但是两个类型的指针不能这样做&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;int x = 20;
const int y = 23;
int * p1 = &amp;amp;x;
const int * p2 = &amp;amp;y;
const int ** pp2;
p1 = p2;        // 不安全 -- 把const指针赋给非const指针
p2 = p1;        // 有效 -- 把非const指针赋给const指针
pp2 = &amp;amp;p1;      // 不安全 –- 嵌套指针类型赋值
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;int * pt;
int (*pa)[3];
int ar1[2][3];
int ar2[3][2];
int **p2;    // 一个指向指针的指针
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;pt = &amp;amp;ar1[0][0];     // 都是指向int的指针
pt = ar1[0];         // 都是指向int的指针
pt = ar1;            // 无效
pa = ar1;            // 都是指向内含3个int类型元素数组的指针
pa = ar2;            // 无效
p2 = &amp;amp;pt;            // 都是指向int *的指针
*p2 = ar2[0];        // 都是指向int的指针
p2 = ar2;            // 无效
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;理解以上的代码&lt;/p&gt;
&lt;h5 id=&#34;函数和多维数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数和多维数组&#34;&gt;#&lt;/a&gt; 函数和多维数组&lt;/h5&gt;
&lt;p&gt;编写一个处理二维数组的函数 一种方法是 利用 for 循环把处理一维数组的函数应用到二维数组的每一行&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;int junk[3][4] = {{2,4,5,8},{3,5,6,9},{12,10,8,6}};
int i ,j;
int total = 0;
for(i=0;i&amp;lt;3;i++) 
total +=sum(junk[i],4);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;junk 是二维数组 那么 junk [i] 就是一堆数组 可将其视为二维数组的一行 sum () 函数计算二维数组的每行的综合 然后 for 循环再把每行的总和加起来&lt;br&gt;
这种方法无法记录行和列的信息 用这种方法计算总和  行和列的信息并不重要 但如果每行代表一年 每列代表一个月 就还需要一个函数计算某列的综合 可以通过声明正确的形参变量来完成 以便函数能正确地传递数组&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;void somefunction(int (*pt)[4]);
void somefunction(int pt[][4]);  //当且仅当pt是一个函数的形式参数时可以这样声明
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一个方括号是空的  表示 pt 是一个指针&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;// array2d.c -- 处理二维数组的函数
#include &amp;lt;stdio.h&amp;gt;
#define ROWS 3
#define COLS 4
void sum_rows(int ar[][COLS], int rows);
void sum_cols(int [][COLS], int);        // 省略形参名，没问题
int sum2d(int(*ar)[COLS], int rows);     // 另一种语法
int main(void)
{
     int junk[ROWS][COLS] = {
               { 2, 4, 6, 8 },
               { 3, 5, 7, 9 },
               { 12, 10, 8, 6 }
     };

     sum_rows(junk, ROWS);
     sum_cols(junk, ROWS);
     printf(&#34;Sum of all elements = %d\n&#34;, sum2d(junk, ROWS));
        
     return 0;
}

void sum_rows(int ar[][COLS], int rows)
{
     int r;
     int c;
     int tot;

     for (r = 0; r &amp;lt; rows; r++)
     {
          tot = 0;
          for (c = 0; c &amp;lt; COLS; c++)
               tot += ar[r][c];
          printf(&#34;row %d: sum = %d\n&#34;, r, tot);
     }
}

void sum_cols(int ar[][COLS], int rows)
{
     int r;
     int c;
     int tot;

     for (c = 0; c &amp;lt; COLS; c++)
     {
          tot = 0;
          for (r = 0; r &amp;lt; rows; r++)
               tot += ar[r][c];
          printf(&#34;col %d: sum = %d\n&#34;, c, tot);
     }
}

int sum2d(int ar[][COLS], int rows)
{
     int r;
     int c;
     int tot = 0;

     for (r = 0; r &amp;lt; rows; r++)
          for (c = 0; c &amp;lt; COLS; c++)
               tot += ar[r][c];
        
     return tot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;输出结果&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;row 0: sum = 20
row 1: sum = 24
row 2: sum = 36
col 0: sum = 17
col 1: sum = 19
col 2: sum = 21
col 3: sum = 23
Sum of all elements = 80
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;一般而言 声明一个指向 N 维数组的指针时只能省略最左边方括号中的值&lt;br&gt;
第一个方括号只用于表示这是一个指针 而其他方括号则用于描述指针所指向数据对象的类型&lt;/p&gt;
&lt;h4 id=&#34;变长数组vla&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#变长数组vla&#34;&gt;#&lt;/a&gt; 变长数组 (VLA)&lt;/h4&gt;
&lt;p&gt;是否发现上面在处理二维数组的函数中 只把数组的行数作为函数的形参 而列数却内置在函数体内&lt;br&gt;
因为 C 规定 数组的位数必须是常量 不能用变量来代替常量&lt;br&gt;
 C99 新增了变长数组 允许使用变量表示数组的维度&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;int a = 4;
int b = 5;
double sales[a][b];  //一个变长数组
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;变长数组有一些限制 变长数组必须是自动存储类别 这意味着无论在函数中声明还是作为函数形参声明 都不能使用 static 和 extern 存储类别说明符 并且不能在声明中初始化他们&lt;br&gt;
变长数组中的变 不是指可以修改已经创建数组的大小 而是 在创建数组时，可以使用变量指定数组的维度&lt;br&gt;
声明一个带二维变长数组参数的函数&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;int sum2d(int row,int cols, int ar [rows][cols])   //有效
int sum2d(int ar [rows][cols],int cols, int row)   //无效
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为 row 和 cols 用做第三个形参二维数组 ar 的两个维度 ar 的声明要使用 rows 和 cols 所以在形参列表中必须在声明 ar 之前先声明这两个形参&lt;br&gt;
 C99/C11 标准规定 可以省略原型中的形参名 但是在这种情况下必须用型号来代替省略的维度&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;int sum2d(int,int,int ar[*][*]);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;函数定义的形参列表中表明的变长数组并未实际创建数组&lt;br&gt;
变长数组实际上是一个指针 这说明变长数组形参的函数实际上实在原始数组中处理数组 因此可以修改传入的数组&lt;/p&gt;
&lt;h5 id=&#34;const和数组大小&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#const和数组大小&#34;&gt;#&lt;/a&gt; const 和数组大小&lt;/h5&gt;
&lt;p&gt;是否可以在声明数组时使用 const 变量？&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;const int SZ = 80;
double ar[SZ];
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;C99/C11 标准允许在声明变长数组时使用 const 常量 所以该数组的定义必须是声明在块中的自动存储类别数组.&lt;/p&gt;
&lt;h4 id=&#34;复合字面量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#复合字面量&#34;&gt;#&lt;/a&gt; 复合字面量&lt;/h4&gt;
&lt;p&gt;字面量是除符号常量外的常量 例如 5 是 int 类型字面量 81.3 是 double 类型字面量 &#39;Y’是 char 类型的字面量 &#34;elephant&#34; 是字符串类型的字面量&lt;br&gt;
对于数组 复合字面量类似数组初始化列表 前面是用括号括起来的类型名&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;int diva[2] = {10,20};   
(int [2]){10,20}   //复合自变量
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;int [2] 就是复合字面量的类型名&lt;br&gt;
初始化复合字面量可以省略大小 编译器会自动计算数组当前的元素个数&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;(int []){50,20,90}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;复合字面量是匿名的 所以不能先创建然后再使用他 必须在创建的同意使用他 使用指针记录地址就是一种用法&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;int * pt1;
pt1 = (int [2]){10,20}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;该复合字面量的字面常量和上面创建的 diva 数组的字面常量完全相同 复合字面量的类型名也代表首元素的地址&lt;br&gt;
还可以把复合字面量作为实际参数传递给带有匹配形式参数的函数&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;total = sum((int[]){4,4,4,5,5,5},6)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;这种用法的好处是 把信息传入函数前不必先创建数组 这是复合字面量的典型用法&lt;br&gt;
该用法应用于二维数组或者多维数组&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;int (*pt2)[4];
ptr2 = (int [2][4]) {{1,2,3,-9},{4,5,6,-8}};
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;演示了如何创建二维 int 数组并存储其地址&lt;br&gt;
复合字面量是提供至临时需要的值得一种手段 复合字面量具有块作用域，这意味着一旦离开定义复合字面量的块 程序将无法保证该字面量是否存在 也就是说 复合字面量的定义在最内层的花括号中&lt;/p&gt;
&lt;h4 id=&#34;数组关键概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组关键概念&#34;&gt;#&lt;/a&gt; 数组关键概念&lt;/h4&gt;
&lt;p&gt;数组用于存储相同类型的数据。C 把数组看作是派生类型，因为数组是建立在其他类型的基础上。也就是说，无法简单地声明一个数组。在声明数组时必须说明其元素的类型，如 int 类型的数组、float 类型的数组，或其他类型的数组。所谓的其他类型也可以是数组类型，这种情况下，创建的是数组的数组（或称为二维数组）。&lt;/p&gt;
&lt;p&gt;通常编写一个函数来处理数组，这样在特定的函数中解决特定的问题，有助于实现程序的模块化。在把数组名作为实际参数时，传递给函数的不是整个数组，而是数组的地址（因此，函数对应的形式参数是指针）。为了处理数组，函数必须知道从何处开始读取数据和要处理多少个数组元素。数组地址提供了 “地址”，“元素个数” 可以内置在函数中或作为单独的参数传递。第 2 种方法更普遍，因为这样做可以让同一个函数处理不同大小的数组。&lt;/p&gt;
&lt;p&gt;数组和指针的关系密切，同一个操作可以用数组表示法或指针表示法。它们之间的关系允许你在处理数组的函数中使用数组表示法，即使函数的形式参数是一个指针，而不是数组。&lt;/p&gt;
&lt;p&gt;对于传统的 C 数组，必须用常量表达式指明数组的大小，所以数组大小在编译时就已确定。C99/C11 新增了变长数组，可以用变量表示数组大小。这意味着变长数组的大小延迟到程序运行时才确定。&lt;/p&gt;
&lt;h4 id=&#34;数组小结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组小结&#34;&gt;#&lt;/a&gt; 数组小结&lt;/h4&gt;
&lt;p&gt;数组是一组数据类型相同的元素。数组元素按顺序存储在内存中，通过整数下标（或索引）可以访问各元素。在 C 中，数组首元素的下标是 0，所以对于内含 n 个元素的数组，其最后一个元素的下标是 n-1。作为程序员，要确保使用有效的数组下标，因为编译器和运行的程序都不会检查下标的有效性。&lt;br&gt;
声明一个简单的一维数组形式如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;type name [ size ];
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里，type 是数组中每个元素的数据类型，name 是数组名，size 是数组元素的个数。对于传统的 C 数组，要求 size 是整型常量表达式。但是 C99/C11 允许使用整型非常量表达式。这种情况下的数组被称为变长数组。&lt;/p&gt;
&lt;p&gt;C 把数组名解释为该数组首元素的地址。换言之，数组名与指向该数组首元素的指针等价。概括地说，数组和指针的关系十分密切。如果 ar 是一个数组，那么表达式 ar [i] 和 *(ar+i) 等价。&lt;/p&gt;
&lt;p&gt;对于 C 语言而言，不能把整个数组作为参数传递给函数，但是可以传递数组的地址。然后函数可以使用传入的地址操控原始数组。如果函数没有修改原始数组的意图，应在声明函数的形式参数时使用关键字 const。在被调函数中可以使用数组表示法或指针表示法，无论用哪种表示法，实际上使用的都是指针变量。&lt;/p&gt;
&lt;p&gt;指针加上一个整数或递增指针，指针的值以所指向对象的大小为单位改变。也就是说，如果 pd 指向一个数组的 8 字节 double 类型值，那么 pd 加 1 意味着其值加 8，以便它指向该数组的下一个元素。&lt;/p&gt;
&lt;p&gt;二维数组即是数组的数组。例如，下面声明了一个二维数组：&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;double sales[5][12];
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;该数组名为 sales，有 5 个元素（一维数组），每个元素都是一个内含 12 个 double 类型值的数组。第 1 个一维数组是 sales [0]，第 2 个一维数组是 sales [1]，以此类推，每个元素都是内含 12 个 double 类型值的数组。使用第 2 个下标可以访问这些一维数组中的特定元素。例如，sales [2][5] 是 slaes [2] 的第 6 个元素，而 sales [2] 是 sales 的第 3 个元素。&lt;/p&gt;
&lt;p&gt;C 语言传递多维数组的传统方法是把数组名（即数组的地址）传递给类型匹配的指针形参。声明这样的指针形参要指定所有的数组维度，除了第 1 个维度。传递的第 1 个维度通常作为第 2 个参数。例如，为了处理前面声明的 sales 数组，函数原型和函数调用如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;void display(double ar[][12], int rows);
...
display(sales, 5);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;变长数组提供第 2 种语法，把数组维度作为参数传递。在这种情况下，对应函数原型和函数调用如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;void display(int rows, int cols, double ar[rows][cols]);
...
display(5, 12, sales);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然上述讨论中使用的是 int 类型的数组和 double 类型的数组，其他类型的数组也是如此。然而，字符串有一些特殊的规则，这是由于其末尾的空字符所致。有了这个空字符，不用传递数组的大小，函数通过检测字符串的末尾也知道在何处停止。我们将在第 11 章中详细介绍。&lt;/p&gt;
&lt;h3 id=&#34;第十一章字符串和字符串函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第十一章字符串和字符串函数&#34;&gt;#&lt;/a&gt; 第十一章字符串和字符串函数&lt;/h3&gt;
&lt;h4 id=&#34;表示字符串和字符串io&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#表示字符串和字符串io&#34;&gt;#&lt;/a&gt; 表示字符串和字符串 I/O&lt;/h4&gt;
&lt;p&gt;字符串是以空字符 (\o) 结尾的 char 类型数组&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#define MSG &#34;I am a symbolic string constant.&#34;
#define MAXLENGTH 81
int main(void)
{
     char words[MAXLENGTH] = &#34;I am a string in an array.&#34;;
     const char * pt1 = &#34;Something is pointing at me.&#34;;
     puts(&#34;Here are some strings:&#34;);
     puts(MSG);
     puts(words);
     puts(pt1);
     words[8] = &#39;p&#39;;
     puts(words);

     return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;和 printf () 函数相同 puts () 函数也属于 stdio.h 系列的输出 / 输出函数 但是和 printf () 不同的是 puts () 函数只显示字符串 而且自动在显示的字符串末尾加上换行符&lt;/p&gt;
&lt;h5 id=&#34;在程序中定义字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在程序中定义字符串&#34;&gt;#&lt;/a&gt; 在程序中定义字符串&lt;/h5&gt;
&lt;h6 id=&#34;1字符串字面量字符串常量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1字符串字面量字符串常量&#34;&gt;#&lt;/a&gt; 1. 字符串字面量 (字符串常量)&lt;/h6&gt;
&lt;p&gt;字符串字面量 (字符串常量): 用双引号括起来的内容 双引号中的字符和编译器自动加入末尾的 \O 字符 都作为字符串存储在内存中&lt;br&gt;
从 ANSI C 标准起 如果字符串字面量之间没有间隔 或者用空白字符分隔 C 会将其视为串联起来的字符串常量&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;char greeting[50] = &#34;Hello,and&#34;&#34;how are&#34;  &#34; you&#34;
                     &#34;&#34; today!&#34; ;
char greeting [50] = &#34;Hello,and how are you today!&#34;

&amp;gt; 这两行代码是等价的
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果要在字符串内部使用双引号 必须要在双引号前面加上一个反斜杠 (\)&lt;br&gt;
 字符串常量属于&lt;strong&gt;静态存储类别&lt;/strong&gt;，这说明 如果在函数中使用字符串常量 该字符串只会被存储一次 在整个程序的生命周期内存在 即使函数被调用多次 用双引号括起来的内容被视为指向该字符串存储位置的指针。类似于把数组名作为指向该数组位置的指针&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
int main(void)
{
     printf(&#34;%s, %p, %c\n&#34;, &#34;We&#34;, &#34;are&#34;, *&#34;space farers&#34;);

     return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;% s 打印 We 根据 % p 转换说明打印一个地址 *&#34;space farers&#34; 表示该字符串所指向地址所存储的值 应该是字符串 &#34;space farers&#34; 的首字符&lt;/p&gt;
&lt;h6 id=&#34;2字符串数组和初始化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2字符串数组和初始化&#34;&gt;#&lt;/a&gt; 2. 字符串数组和初始化&lt;/h6&gt;
&lt;p&gt;定义字符串数组时 必须让编译器知道需要多少空间 一种方法是用足够空间的数组 存储字符串&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;const char m1[40] = &#34;Limit yourself to one line&#39;s worth.&#34;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;这种形式的初始化比标准的数组初始化形式简单得多&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;const char m1[40] = { &#39;L&#39;,&#39;i&#39;, &#39;m&#39;, &#39;i&#39;, &#39;t&#39;, &#39; &#39;, &#39;y&#39;, &#39;o&#39;, &#39;u&#39;, &#39;r&#39;, &#39;s&#39;, &#39;e&#39;, &#39;l&#39;,
                      &#39;f&#39;, &#39; &#39;, &#39;t&#39;, &#39;o&#39;, &#39; &#39;, &#39;o&#39;, &#39;n&#39;, &#39;e&#39;, &#39; &#39;,&#39;l&#39;, &#39;i&#39;, &#39;n&#39;, &#39;e&#39;,   
                      &#39;\&#39;, &#39;s&#39;, &#39; &#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;,&#39;t&#39;, &#39;h&#39;, &#39;.&#39;, &#39;\0&#39;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意最后的空字符 没有这个空字符 这就不是一个字符串 而是一个字符数组&lt;br&gt;
在指定数组大小时候要确保数组的元素个数至少比字符串长度多 1 (为了容纳空字符) 所有违背使用的元素都被自动化初始为 \0 空字符&lt;br&gt;
省略数组初始化声明中的大小编译器会自动计算数组的大小&lt;br&gt;
处理字符串的函数通常都不知道数组的大小 这些函数通过查找字符串末尾的空字符确定字符串在何处结束&lt;br&gt;
让编译器计算输的的大小只能用在初始化数组时。如果创建一个稍后再填充的数组 就必须在声明时指定大小。声明数组时数组大小 IXUS 是可求值得整数 在 CC 新增变长数组迁 数组的大小必须是整型变量 包括由整型变量组成的表达式&lt;/p&gt;
&lt;p&gt;字符数组名和其他数组名一样 是该数组首元素的地址&lt;/p&gt;
&lt;p&gt;同时还可以使用指针表示法创建字符串&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;const char * pt1 =&#34;yogmas best&#34;;
const char ar1[] = &#34;yogmas best&#34;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;这两个声明几乎相同&lt;br&gt;
以上两个声明表示 pt1 和 ar1 都是该字符串的地址 在这两种情况下 带双引号的字符串本身决定了鱼类给字符串的存储空间 尽管如此 这两种形式并不完全相同&lt;/p&gt;
&lt;h6 id=&#34;3数组和指针&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3数组和指针&#34;&gt;#&lt;/a&gt; 3. 数组和指针&lt;/h6&gt;
&lt;p&gt;数组形式和指针形式有一些不同点&lt;br&gt;
数组形式：数组形式在计算机的内存中分配一个数组 (每个元素对应一个字符 再加上一个末尾的空字符), 每个元素被初始化为字符串字面量对应的字符.&lt;br&gt;
 字符串都作为可执行文件的一部分存储在数据段中 当把程序载入内存时 也载入了了程序中的字符串 字符串存储在静态存储区中&lt;br&gt;
程序在开始运行时 才为该数组分配内存 此时 才将字符串拷贝到数组中&lt;br&gt;
此时字符串有两个副本 一个是在静态内存中的字符串字面量 另一个是存储在数组中的字符串&lt;br&gt;
编译器把数组名识别为该数组首元素地址的别名 这以为着在数组形式中数组名是字符常量 不能更改 如果改变了就意味着改变了数组的存储位置 可以进行类似 ar1+1 这样的操作 表示数组的下一个元素 但是不允许进行 ++ar1 这样的操作 递增运算符只能用于变量名前&lt;/p&gt;
&lt;p&gt;指针形式：指针形式是的编译器为字符串在静态存储区预留 29 个元素的空间 另外一旦开始执行程序 他会为&lt;strong&gt;指针变量&lt;/strong&gt;留出一个存储位置 并把字符串的地址存储在指针变量中 该变量最初指向该字符串的首字符但是它的值可以改变 因此可以使用递增运算符&lt;br&gt;
&lt;strong&gt;字符串字面量被视为 const 数据&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;指针和字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#指针和字符串&#34;&gt;#&lt;/a&gt; 指针和字符串&lt;/h5&gt;
&lt;p&gt;字符串的绝大多数操作都是通过指针完成的&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
int main(void)
{
     const char * mesg = &#34;Don&#39;t be a fool!&#34;;
     const char * copy;

     copy = mesg;
     printf(&#34;%s\n&#34;, copy);
     printf(&#34;mesg = %s; &amp;amp;mesg = %p; value = %p\n&#34;, mesg, &amp;amp;mesg, mesg);
     printf(&#34;copy = %s; &amp;amp;copy = %p; value = %p\n&#34;, copy, &amp;amp;copy, copy);
        
     return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果编译器不识别 % p 用 % u 或者 % lu 来代替&lt;br&gt;
字符串形式输出用 % s 转换说明&lt;br&gt;
因为最后 mesg 和 copy 指针输出的值是一样的 即两个指针指向地址是一样的 这说明程序并未拷贝字符串 copy=mesg 仅仅把 mesg 的值即 mesg 存储的地址赋值给 copy 让 copy 也指向这一个地址&lt;br&gt;
不拷贝整个字符串的原因是因为这样做更具有效率 如果一定要拷贝字符串可以使用 **strcpy () 和 strncpy ()** 函数，后续会介绍这两个函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;字符串输入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串输入&#34;&gt;#&lt;/a&gt; 字符串输入&lt;/h4&gt;
&lt;p&gt;如果想把一个字符串读入程序 首先必须预留存储该字符串的空间 然后用输入函数获取该字符串&lt;/p&gt;
&lt;h5 id=&#34;分配空间&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分配空间&#34;&gt;#&lt;/a&gt; 分配空间&lt;/h5&gt;
&lt;p&gt;分配空间的时候必须为字符串分配足够的空间 &lt;strong&gt;不要指望计算机在读取字符串的时候顺便计算它的长度然后再分配空间&lt;/strong&gt; (计算机不会这样做 除非你编写一个处理这些任务的函数)&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;char * name;
scanf(&#34;%s&#34;,name);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;可能会通过编译 但是在读入 name 时 name 可能会擦写掉程序中的数据或代码 而导致程序异常终止&lt;br&gt;
因为 scanf () 要把信息拷贝到参数指定的地址上 此时 该参数是个未初始化的指针 name 可能会指向任何地方&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最简单的方法是 在声明时指明数组的大小&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;char name[81];
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;还有一种方法：使用 C 库函数来分配内存 (第 12 章)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为字符串分配玩内存后 开始讨论读取字符串的函数&lt;/p&gt;
&lt;h5 id=&#34;gets函数不幸&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#gets函数不幸&#34;&gt;#&lt;/a&gt; gets () 函数–不幸&lt;/h5&gt;
&lt;p&gt;在读取字符串时，scanf () 和转换说明 % s 只能读取一个单词&lt;br&gt;
程序中经常要读取一整行输入 gets () 函数就用于处理这种情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get () 函数读取整行输入 直到遇到换行符 然后丢弃换行符 存储其余字符 并在这些字符的末尾添加一个空字符使其称为一个 C 字符串 其经常和 puts () 函数配对使用&lt;/li&gt;
&lt;li&gt;puts () 函数用于显示字符串 并且在末尾添加换行符&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#define STLEN 81
int main(void)
{
     char words[STLEN];

     puts(&#34;Enter a string, please.&#34;);
     gets(words);  // 典型用法
     printf(&#34;Your string twice:\n&#34;);
     printf(&#34;%s\n&#34;, words);
     puts(words);
     puts(&#34;Done.&#34;);
        
     return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;整行输入都被存储在 words 中 put () 和 printf () 的效果相同&lt;br&gt;
但是在有些编译器中并不会输出正确的结果，并且会给出警告&lt;br&gt;
 gets () 的唯一参数是 words, 他无法检查数组是否装得下输入行.&lt;br&gt;
 数组名仅仅是数组首元素的地址。因此，gets () 函数只知道数组的开始处 并不知道数组中有多少个元素&lt;/p&gt;
&lt;p&gt;如果输入的字符过长 会导致&lt;strong&gt;缓冲区溢出&lt;/strong&gt;即多余的字符超出了指定的目标空间 如果这些多于的字符只是占用了&lt;strong&gt;尚未使用&lt;/strong&gt;的内存就不会立即出现问题 如果他们擦写掉程序中的其他数据就会导致程序异常中止&lt;br&gt;
&lt;em&gt;在过去有些人通过系统编程 利用 gets () 插入和运行一些破坏系统安全的代码&lt;/em&gt;&lt;br&gt;
 C99 中承认了 gets () 的问题并且建议不要使用它 尽管如此 现有程序中因为含有大量使用该函数的代码 所以在标准中保留了 gets ()&lt;br&gt;
 C11 直接从标准中废除了 gets () 函数&lt;br&gt;
所以这就导致了有些编译器支持 gets () 函数而有些编译器不支持 gets () 函数&lt;br&gt;
部分编译器为了兼容以前的代码 就继续支持 gets () 函数&lt;/p&gt;
&lt;h5 id=&#34;gets的替代品&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#gets的替代品&#34;&gt;#&lt;/a&gt; gets () 的替代品&lt;/h5&gt;
&lt;p&gt;过去尝尝用 fgets () 来代替 gets (),fgets () 函数稍微复杂些 在处理输入方面与 gets () 略有不同 C11 标准新增的 gets_s () 也可以代替 gets () 该函数与 gets () 函数更为接近 但是 它是 stdio.h 输入 / 输出函数系列中的可选拓展 所以编译器不一定支持它&lt;/p&gt;
&lt;h6 id=&#34;fgets函数和fputs&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#fgets函数和fputs&#34;&gt;#&lt;/a&gt; fgets () 函数和 (fputs)&lt;/h6&gt;
&lt;p&gt;fgets () 函数通过第 2 个参数限制读入的字符数来解决溢出的问题&lt;br&gt;
&lt;strong&gt;该函数专门设计处理文件输入&lt;/strong&gt;一般情况下可能不太好用&lt;br&gt;
 fgets () 与 gets () 的区别如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fgets () 函数的第 2 个参数指明了读入字符的最大数量，如果该参数是 n 那么 fgets () 函数将读入 n-1 个字符 或者读到遇到的第一个换行符为止&lt;/li&gt;
&lt;li&gt;如果 fgets () 读到一个换行符，会把它存储在字符串中 这点和 gets () 不同，gets () 会丢地换行符&lt;/li&gt;
&lt;li&gt;fgets () 函数的第三个参数执行要读入的文件 如果读入从键盘输入的数据 则以 **stdin (标准输入)&lt;strong&gt; 作为参数 该标识符定义在 stdio.h 中&lt;br&gt;
因为 fgets () 函数把换行符放在字符串的末尾 (假设输入行不溢出) 通常要与 fputs () 配对使用，除非该函数不在字符串末尾添加换行符 fputs () 的第 2 个参数指明它要写入的文件 如果要显示在计算机显示器上，应使用&lt;/strong&gt; stdout (标准输出)** 作为参数&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#define STLEN 14
int main(void)
{
     char words[STLEN];

     puts(&#34;Enter a string, please.&#34;);
     fgets(words, STLEN, stdin);
     printf(&#34;Your string twice (puts(), then fputs()):\n&#34;);
     puts(words);
     fputs(words, stdout);
     puts(&#34;Enter another string, please.&#34;);
     fgets(words, STLEN, stdin);
     printf(&#34;Your string twice (puts(), then fputs()):\n&#34;);
     puts(words);
     fputs(words, stdout);
     puts(&#34;Done.&#34;);
        
     return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;输入案例&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;Enter a string, please.
apple pie
Your string twice (puts(), then fputs()):
apple pie

apple pie
Enter another string, please.
strawberry shortcake
Your string twice (puts(), then fputs()):
strawberry sh
strawberry shDone.
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;第一行输入 apple pie 比 fgets () 读入的整行输入短 因此 apple pie 被存储在数组中 所以当 puts () 显示该字符串时又在末尾添加了换行符 因此 apple pie 后面有一行空行 因为 fputs () 不在字符串末尾添加换行符 所以并未打印出空行&lt;/li&gt;
&lt;li&gt;第二行输入 的字符超过了大小的限制 所以只会读入相应的字符 然后把前几个范围内的存储在数组中&lt;br&gt;
&lt;strong&gt; puts () 函数会在待输入字符串末尾添加一个换行符 而 fputs () 不会这样做&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;同样 fgets () 存储时会在末尾自动存储一个换行符 而 gets () 不会这样&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;fgets () 函数返回 char 的指针 该函数返回的地址与传入的一个参数相同 如果读到文件末尾将返回&lt;strong&gt;空指针&lt;/strong&gt;该指针保证不会指向有效的数据 所以可用于表述特殊情况 在 C 语言中用宏 NULL 来代替 (如果读入数据错误 该函数也返回 NULL).&lt;/p&gt;
&lt;p&gt;下列函数演示了一个简单的循环 读入并显示用户输入的内容 直到 fgets () 读到文件末尾或空行 (首字符是换行符)&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#define STLEN 10
int main(void)
{
     char words[STLEN];

     puts(&#34;Enter strings (empty line to quit):&#34;);
     while (fgets(words, STLEN, stdin) != NULL &amp;amp;&amp;amp; words[0] != &#39;\n&#39;)
          fputs(words, stdout);
     puts(&#34;Done.&#34;);
        
     return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;输出结果如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;Enter strings (empty line to quit):
By the way, the gets() function
By the way, the gets() function
also returns a null pointer if it
also returns a null pointer if it
encounters end-of-file.
encounters end-of-file.

Done.
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;神奇的是 这个程序在处理过长的输入时完全没有问题&lt;br&gt;
通过 while 循环每次读入 9 个字符 (虽然 STLEN 为 10 但是最后一个位置需要留给 \0) 并且没有换行由此不断叠加&lt;br&gt;
&lt;strong&gt; important&lt;/strong&gt; 系统使用缓冲的 I/O 用户按 enter 键之前 输入都被存储在缓冲区中 按下 enter 键就在输入中增加了一个换行符 并且把整行输入发送给 fgets () 对出输出 fputs () 把字符发送给另一个缓冲区 当发送换行符时 缓冲区的内容被发送到屏幕上&lt;br&gt;
 fgets () 存储换行符有好有坏&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;好处：对于存储的字符串而言 检查末尾是否有换行符可以判断是否读取了一整行&lt;/li&gt;
&lt;li&gt;坏处：可能编者本身并不想把换行符存储在字符串中 这样的换行符会带来一些麻烦&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;存储的字符串 如果不是一整行 要妥善处理一行中剩下的字符&lt;/p&gt;
&lt;p&gt;如何处理掉换行符呢&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在已存储的字符串中查找换行符 并将其替换成空字符&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;while (words[i] != &#39;\n&#39;) // 假设\n在words中
     i++;
words[i] = &#39;\0&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;如果仍然有字符串留在输入行怎么办，如果目标数组装不下一整行输入就丢弃多出的字符&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;while (getchar() != &#39;\n&#39;)    // 读取但不存储输入，包括\n
continue;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下程序读取输入航 删除存储在字符串中的换行符  如果没有换行符 就丢弃数组装不下的字符&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#define STLEN 10
int main(void)
{
     char words[STLEN];
     int i;

     puts(&#34;Enter strings (empty line to quit):&#34;);
     while (fgets(words, STLEN, stdin) != NULL &amp;amp;&amp;amp; words[0] != &#39;\n&#39;)
     {
          i = 0;
          while (words[i] != &#39;\n&#39; &amp;amp;&amp;amp; words[i] != &#39;\0&#39;)
               i++;
          if (words[i] == &#39;\n&#39;)
               words[i] = &#39;\0&#39;;
          else    // 如果word[i] == &#39;\0&#39;则执行这部分代码
               while (getchar() != &#39;\n&#39;)
                     continue;
          puts(words);
     }
     puts(&#34;done&#34;);
     return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;遍历字符串 直到遇到换行符或者空字符 如果先遇到换行符 就替换成空字符 如果先遇到空字符 else 部分就丢弃输入行的剩余字符&lt;/p&gt;
&lt;h6 id=&#34;gets_s函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#gets_s函数&#34;&gt;#&lt;/a&gt; gets_s () 函数&lt;/h6&gt;
&lt;p&gt;和 fgets () 函数类似 用一个参数限制读入的字符数目&lt;/p&gt;
&lt;p&gt;区别如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gets_s () 只从标准输入中读取数据 不需要第三个参数&lt;/li&gt;
&lt;li&gt;gets_s 读到换行符会丢弃换行符而不是存储&lt;/li&gt;
&lt;li&gt;如果 gets_s 读到最大字符数都没有读到换行符 他会先把数组中的首字符设置成空字符 读取然后丢弃随后的输入 知道读到换行符 然后返回空指针 接着调用 &#34;处理函数&#34; (可能会终止或者退出程序)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果输入行未超过最大字符数目 gets_s () 和 gets () 相同&lt;/p&gt;
&lt;p&gt;如果目标存储区装得下输入行 以上函数效果都一样&lt;/p&gt;
&lt;p&gt;如果输入行太长会怎样&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 gets () 会擦写现有数据 具有安全隐患&lt;/li&gt;
&lt;li&gt;gets_s () 很安全 但是如果不希望程序终止或者退出 就要知道如何编写 &#34;处理函数&#34; 如果让程序继续运行 gets_s 会丢弃该输入行的其余字符&lt;/li&gt;
&lt;li&gt;fgets () 综合了以上两个 可以自由选择 是截取丢弃 还是继续使用输入行中超出的字符 可以参考以上 fgets () 中两个程序的处理方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;s_gets函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#s_gets函数&#34;&gt;#&lt;/a&gt; s_gets () 函数&lt;/h6&gt;
&lt;p&gt;fgets () 函数的一种语法 读取郑航输入并用空字符代替换行符 或者读取一部分输入 并丢弃其余部分 然而并没有处理这种情况的标准 C 库函数&lt;br&gt;
所以我们就创建一个 或许在后面的程序中会用得上&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;char * s_gets(char * st, int n)
{
     char * ret_val;
     int i = 0;

     ret_val = fgets(st, n, stdin);
     if (ret_val)    // 即，ret_val != NULL
     {
          while (st[i] != &#39;\n&#39; &amp;amp;&amp;amp; st[i] != &#39;\0&#39;)
               i++;
          if (st[i] == &#39;\n&#39;)
               st[i] = &#39;\0&#39;;
          else&amp;lt;ins&amp;gt;
&amp;lt;/ins&amp;gt;               while (getchar() != &#39;\n&#39;)
                     continue;
     }
     return ret_val;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果 fgets () 返回 NULL，说明读到文件结尾或出现读取错误，s_gets () 函数跳过了这个过程。它模仿上面处理 fgets () 函数的的处理方法，如果字符串中出现换行符，就用空字符替换它；如果字符串中出现空字符，就丢弃该输入行的其余字符，然后返回与 fgets () 相同的值。我们在后面的示例中将讨论 fgets () 函数。&lt;/p&gt;
&lt;p&gt;为什么要丢弃过长输入行中的余下字符。&lt;br&gt;
这是因为，输入行中多出来的字符会被留在缓冲区中，成为下一次读取语句的输入。&lt;br&gt;
例如，如果下一条读取语句要读取的是 double 类型的值，就可能导致程序崩溃。丢弃输入行余下的字符保证了读取语句与键盘输入同步。&lt;/p&gt;
&lt;p&gt;s_gets () 函数并不完美，它最严重的缺陷是遇到不合适的输入时毫无反应。它丢弃多余的字符时，既不通知程序也不告知用户。但是，用来替换前面程序示例中的 gets () 足够了。&lt;/p&gt;
&lt;h6 id=&#34;空字符和空指针&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#空字符和空指针&#34;&gt;#&lt;/a&gt; 空字符和空指针&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;空字符 (\0) 用于标记 C 字符串末尾的字符 对应字符编码为 0 由于其他字符的编码不可能为 0 所以空字符不可能是字符串的一部分&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;空指针 (NULL) 有一个值 该值不会与任何数据的有效地址对应.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;空指针是整数类型 空指针是指针类型 空字符是一个字符占 1 字节 空指针是一个地址 占 4 字节&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;scanf函数-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#scanf函数-2&#34;&gt;#&lt;/a&gt; scanf () 函数&lt;/h5&gt;
&lt;p&gt;前面用 scanf () 和 % s 来读取字符串&lt;br&gt;
 scanf () 和 gets () 以及 fgets () 的区别在于他们如何确定字符串的末尾&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;scanf () 更像是在 &#34;获取单词&#34; 而不是在 &#34;获取字符串&#34;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果预留区装得下输入航 gets () 和 fgets () 会读取第一个换行符之前所有的字符&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;scanf () 有两种方法确定输入结束，但是都是从第一个非空白字符作为字符的开始&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 % s 转换说明 以下一个空白字符 (空行 空格 制表符 换行符) 作为字符串的结束 (&lt;strong&gt;空白字符不存储在字符串中&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;如果指定了字符串的长度 如 %8s 那么 scanf () 将读取 8 个字符 或者读到空白符位置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/oFcCd0&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/25/oFcCd0.png&#34; alt=&#34;oFcCd0.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;scanf () 函数返回一个整数值 该值等于 scanf () 成功读取的项数 或者 EOF (读到文件末尾)&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
int main(void)
{
     char name1[11], name2[11];
     int count;

     printf(&#34;Please enter 2 names.\n&#34;);
     count = scanf(&#34;%5s %10s&#34;, name1, name2);
     printf(&#34;I read the %d names %s and %s.\n&#34;, count, name1, name2);
        
     return 0
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;输入示例&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Please enter 2 names.&lt;br&gt;
Jesse Jukes&lt;br&gt;
I read the 2 names Jesse and Jukes.  // 都未超出字段宽度&lt;br&gt;
 Please enter 2 names.&lt;br&gt;
Liza Applebottham&lt;br&gt;
I read the 2 names Liza and Applebotth.  // 第二个超出了字段宽度 自动截取了&lt;br&gt;
 Please enter 2 names.&lt;br&gt;
Portensia Callowit&lt;br&gt;
I read the 2 names Porte and nsia.   先读取了 5 个字符 (第一次调用 scanf ()) 然后又读取了 4 字符 (第二次调用 scanf () 从上一次调用结束的地方继续读取数据)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;根据输入数据的性质 用 scanf () 读取键盘输入的数据 有时并不合适&lt;br&gt;
 scanf () 无法完整地读入书名或者歌曲名 除非这些名称是一个单词&lt;br&gt;
 scanf () 的典型用法：读取并转换混合数据类型为某种标准形式&lt;br&gt;
 scanf () 缺点：输入行过长也会导致数据溢出&lt;br&gt;
解决方法：在 % s 转换说明中限制字段宽度&lt;/p&gt;
&lt;h4 id=&#34;字符串输出&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串输出&#34;&gt;#&lt;/a&gt; 字符串输出&lt;/h4&gt;
&lt;p&gt;C 中 3 个用于打印字符串的标准库函数&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;puts()&lt;/li&gt;
&lt;li&gt;fputs()&lt;/li&gt;
&lt;li&gt;printf()&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;puts函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#puts函数&#34;&gt;#&lt;/a&gt; puts () 函数&lt;/h5&gt;
&lt;p&gt;puts () 函数会在末尾自动添加一个换行符&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#define DEF &#34;I am a #defined string.&#34;
int main(void)
{
     char str1[80] = &#34;An array was initialized to me.&#34;;
     const char * str2 = &#34;A pointer was initialized to me.&#34;;

     puts(&#34;I&#39;m an argument to puts().&#34;);
     puts(DEF);
     puts(str1);
     puts(str2);
     puts(&amp;amp;str1[5]);  //puts后面需要跟的是一个地址 字符串的起始地址
     puts(str2 + 4);
        
     return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;输出如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I’m an argument to puts().&lt;br&gt;
I am a #defined string.&lt;br&gt;
An array was initialized to me.&lt;br&gt;
A pointer was initialized to me.&lt;br&gt;
ray was initialized to me.&lt;br&gt;
inter was initialized to me.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;puts 遇到空字符就停止输入 所以必须却要有空字符&lt;br&gt;
如果缺少空字符他会一直打印内存后面中的内容 直到读到空字符的位置为止&lt;/p&gt;
&lt;h5 id=&#34;fputs函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#fputs函数&#34;&gt;#&lt;/a&gt; fputs () 函数&lt;/h5&gt;
&lt;p&gt;与 puts () 函数的区别如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fputs () 的第二个参数指明要写入数据的文件 如果要打印在显示器上 用定义在 stdio.h 中的 stdout (标准输出) 作为该参数&lt;/li&gt;
&lt;li&gt;fputs () 不会在输出的末尾添加换行符 而 puts () 会&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;与前面的输入函数关联起来 也就是前面提过的&lt;br&gt;
&lt;strong&gt; puts () 函数会在待输入字符串末尾添加一个换行符 而 fputs () 不会这样做&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;同样 fgets () 存储时会在末尾自动存储一个换行符 而 gets () 不会这样&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不推荐使用 gets () 因为已经废弃了  学习 gets () 只是以防以后看到 gets () 代码看不懂&lt;/p&gt;
&lt;h5 id=&#34;printf函数-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#printf函数-2&#34;&gt;#&lt;/a&gt; printf () 函数&lt;/h5&gt;
&lt;p&gt;printf () 把字符串的地址作为参数&lt;br&gt;
 printf () 不是那么方便 但是它可以格式化不同的数据类型&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;printf(&#34;%s \n&#34;,string)
puts(string); 这两个语句的效果是相同的
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;自定义输入输出函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自定义输入输出函数&#34;&gt;#&lt;/a&gt; 自定义输入 / 输出函数&lt;/h4&gt;
&lt;p&gt;以下是一个 类似 puts 但是不会就自动添加换行符的函数&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
void put1(const char * string)/* 不会改变字符串 */
{
     while (*string != &#39;\0&#39;)
          putchar(*string++);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为从右向左运算 *string++ 中递增是 string 本身而不是递增它所指向的字符&lt;/p&gt;
&lt;p&gt;很多 C 程序员在 whild 中会使用下面的测试条件&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;while (*string) 若*string是空字符 则为0 循环结束 这种方法风场渐变
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下将打印一串字符串 并且 统计打印的字符个数&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt; int put2(const char * string)
 {
      int count = 0;
      while (*string)    /* 常规用法 */
      {
           putchar(*string++);
           count++;
      }
      putchar(&#39;\n&#39;);    /* 不统计换行符 */

      return(count);
 }
 具体的程序使用
 #include &amp;lt;stdio.h&amp;gt;
 void put1(const char *);
 int put2(const char *);

 int main(void)
 {
     put1(&#34;If I&#39;d as much money&#34;);
     put1(&#34; as I could spend,\n&#34;);
     printf(&#34;I count %d characters.\n&#34;,
          put2(&#34;I never would cry old chairs to mend.&#34;));

     return 0;
 }

 void put1(const char * string)
 {
     while (*string)  /* 与 *string != &#39;\0&#39; 相同 */
          putchar(*string++);
 }

 int put2(const char * string)
 {
     int count = 0;
     while (*string)
     {
          putchar(*string++);
          count++;
     }
     putchar(&#39;\n&#39;);

     return(count);

 }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;字符串函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串函数&#34;&gt;#&lt;/a&gt; 字符串函数&lt;/h4&gt;
&lt;p&gt;C 库中有多个处理字符串的函数 ANSI C 放在了 string.h 头文件中&lt;/p&gt;
&lt;h5 id=&#34;strlen-函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#strlen-函数&#34;&gt;#&lt;/a&gt; strlen () 函数&lt;/h5&gt;
&lt;p&gt;strlen () 函数用于统计字符串的长度&lt;br&gt;
以下函数用于缩短字符串的长度&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;void fit(char *string, unsigned int size)
{
     if (strlen(string) &amp;gt; size)
         string[size] = &#39;\0&#39;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;strcat函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#strcat函数&#34;&gt;#&lt;/a&gt; strcat () 函数&lt;/h5&gt;
&lt;p&gt;strcat () 用于拼接字符串&lt;br&gt;
函数接受两个字符串作为参数 该函数是把第二个字符串的备份附加在第一个字符串末尾 然后把拼接后形成的新字符串作为第一个字符串 第二个字符串不发生改变&lt;br&gt;
 strcat () 的类型是指向 char 的指针 返回的值是第一个字符串的地址&lt;/p&gt;
&lt;h5 id=&#34;strncat函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#strncat函数&#34;&gt;#&lt;/a&gt; strncat () 函数&lt;/h5&gt;
&lt;p&gt;strcat () 无法检查第一个数组 是否能够容纳第 2 个字符串 如果第一个数组的空间不够大 拼接的时候就会出现问题&lt;br&gt;
 strncat () 的第三个参数制定了最大添加字符数&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;strncat(bugs,addon,13)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;在加到第 13 个字符或者空字符的时候就停止&lt;br&gt;
 strncat () 和 gets () 一样也会导致缓冲区溢出 但是并没有废弃&lt;/p&gt;
&lt;h5 id=&#34;strcmp函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#strcmp函数&#34;&gt;#&lt;/a&gt; strcmp () 函数&lt;/h5&gt;
&lt;p&gt;strcmp 用于字符串的比较&lt;br&gt;
如果两个字符串参数相同 函数就返回 0 否则返回非 0 数&lt;br&gt;
&lt;strong&gt;注意&lt;/strong&gt;&lt;br&gt;
 strcmp () 比较的是字符串不是整个数组 即使数组很大 strcmp () 也只会比较数组中存储的字符串 也就是第一个空字符前面的字符串&lt;/p&gt;
&lt;h6 id=&#34;strcmp的返回值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#strcmp的返回值&#34;&gt;#&lt;/a&gt; strcmp () 的返回值&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;如果第一个字符串在第二个字符串前面 strcmp () 返回一个负数&lt;/li&gt;
&lt;li&gt;如果两个字符串相同 则返回 0&lt;/li&gt;
&lt;li&gt;如果第一个字符串在第二个字符串后面 strcmp () 返回一个正数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比较过程中 strcmp () 会依次比较每个字符 知道发现第一对不同的字符为止 然后返回相应的值&lt;/p&gt;
&lt;p&gt;strcmp () 与其说是比较字符串 不如说是根据 ASCII 的值 按照&lt;strong&gt;机器排序序列&lt;/strong&gt;进行比较&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt; strcmp () 比较的是字符串而不是字符 也就是说即使要比较单个字符 也应该写成 &#34;A&#34; 而不是’A’&lt;br&gt;
实际上因为 char 类型实际上是 int 类型 所以比较字符时 也不需要使用到 strcmp () 函数&lt;/p&gt;
&lt;h5 id=&#34;strncmp函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#strncmp函数&#34;&gt;#&lt;/a&gt; strncmp () 函数&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;strcmp () 比较字符串中的字符 这一过程会持续到直到发现不同&lt;/li&gt;
&lt;li&gt;strncmp () 在比较两个字符串时 可以限定函数只比较哪几个字符 这样可以用来查找哪个字母 或者开头 结尾 相同的单词&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;strncmp(&#34;transform&#34;,&#34;transparent&#34;,5)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;此时函数就只会比较前面 5 个字符 并且输出的结果是 0 因为前 5 个字符 trans 相同&lt;/p&gt;
&lt;h5 id=&#34;strcpy和strncpy函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#strcpy和strncpy函数&#34;&gt;#&lt;/a&gt; strcpy () 和 strncpy () 函数&lt;/h5&gt;
&lt;p&gt;如何希望拷贝整个字符串就用 strcpy ()&lt;br&gt;
 strcpy () 函数相当于&lt;strong&gt;字符串赋值运算符&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;strcpy () 第二个参数 指向的字符串被拷贝至第一个参数指向的数组中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拷贝出来的字符串被称为&lt;strong&gt;目标字符串&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;最初的字符串被称为&lt;strong&gt;源字符串&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果拷贝到的数组没有被初始化 这时候可能被拷贝到任意地方&lt;/p&gt;
&lt;h6 id=&#34;strcpy的其他属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#strcpy的其他属性&#34;&gt;#&lt;/a&gt; strcpy () 的其他属性&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;strcpy () 的返回类型是 char * 该函数返回第一个字符的地址&lt;/li&gt;
&lt;li&gt;第一个参数不必指向数组的开始&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;更谨慎的选择-strncpy&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#更谨慎的选择-strncpy&#34;&gt;#&lt;/a&gt; 更谨慎的选择: strncpy ()&lt;/h6&gt;
&lt;p&gt;strcpy () 不能检查目标空间是否能容纳源字符串的副本&lt;br&gt;
 strncpy () 的第三个参数指明可拷贝的最大字符数&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;strncpy(target,source,n)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;把 source 中的 n 个字符或者空字符之前的字符拷贝到 target 中&lt;br&gt;
 strncpy () 拷贝字符串的长度不会超过 n&lt;br&gt;
&lt;strong&gt; 如果拷贝到底 n 还没有拷贝完整个字符串 就不会拷贝空字符&lt;/strong&gt;&lt;br&gt;
如此写程序的时候可以用 if else 语句 把拷贝过去的字符串最后一个转化为空字符 以保证存储的是一个字符串&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;sprintf函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sprintf函数&#34;&gt;#&lt;/a&gt; sprintf () 函数&lt;/h6&gt;
&lt;p&gt;sprintf 函数声明在 stdio.h 中&lt;br&gt;
该函数和 printf 类似 但是是把数据写入字符串 而不是打印在电脑屏幕上&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sprintf () 的第一个参数是目标字符串的地址&lt;/li&gt;
&lt;li&gt;其他参数和 printf () 相同&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;sprintf(formal,&#34;    &#34;,X,Y,Z)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;表示法 X,Y,Z 拼接成一个字符串并且存储在 formal 中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;其他字符串函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#其他字符串函数&#34;&gt;#&lt;/a&gt; 其他字符串函数&lt;/h5&gt;
&lt;p&gt;对以上函数 和一些常用函数的总结&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;char *strcpy (char* restrict s1, const char * restrict s2);&lt;br&gt;
 该函数把 s2 指向的字符串（包括空字符）拷贝至 s1 指向的位置，返回值是 s1。&lt;br&gt;
char*strncpy(char * restrict s1, const char * restrict s2, size_t n);&lt;br&gt;
 该函数把 s2 指向的字符串拷贝至 s1 指向的位置，拷贝的字符数不超过 n，其返回值是 s1。该函数不会拷贝空字符后面的字符，如果源字符串的字符少于 n 个，目标字符串就以拷贝的空字符结尾；如果源字符串有 n 个或超过 n 个字符，就不拷贝空字符。&lt;br&gt;
char *strcat(char * restrict s1, const char * restrict s2);&lt;br&gt;
 该函数把 s2 指向的字符串拷贝至 s1 指向的字符串末尾。s2 字符串的第 1 个字符将覆盖 s1 字符串末尾的空字符。该函数返回 s1。&lt;br&gt;
char *strncat(char * restrict s1, const char * restrict s2, size_t n);&lt;br&gt;
 该函数把 s2 字符串中的 n 个字符拷贝至 s1 字符串末尾。s2 字符串的第 1 个字符将覆盖 s1 字符串末尾的空字符。不会拷贝 s2 字符串中空字符和其后的字符，并在拷贝字符的末尾添加一个空字符。该函数返回 s1。&lt;br&gt;
int strcmp(const char * s1, const char * s2);&lt;br&gt;
 如果 s1 字符串在机器排序序列中位于 s2 字符串的后面，该函数返回一个正数；如果两个字符串相等，则返回 0；如果 s1 字符串在机器排序序列中位于 s2 字符串的前面，则返回一个负数。&lt;br&gt;
int strncmp(const char * s1, const char * s2, size_t n);&lt;br&gt;
 该函数的作用和 strcmp () 类似，不同的是，该函数在比较 n 个字符后或遇到第 1 个空字符时停止比较。&lt;br&gt;
char *strchr(const char * s, int c);&lt;br&gt;
 如果 s 字符串中包含 c 字符，该函数返回指向 s 字符串首次出现的 c 字符的指针（末尾的空字符也是字符串的一部分，所以在查找范围内）；如果在字符串 s 中未找到 c 字符，该函数则返回空指针。&lt;br&gt;
char *strpbrk(const char * s1, const char * s2);&lt;br&gt;
 如果 s1 字符中包含 s2 字符串中的任意字符，该函数返回指向 s1 字符串首位置的指针；如果在 s1 字符串中未找到任何 s2 字符串中的字符，则返回空字符。&lt;br&gt;
char *strrchr(const char * s, char c);&lt;br&gt;
 该函数返回 s 字符串中 c 字符的最后一次出现的位置（末尾的空字符也是字符串的一部分，所以在查找范围内）。如果未找到 c 字符，则返回空指针。&lt;br&gt;
char *strstr(const char * s1, const char * s2);&lt;br&gt;
 该函数返回指向 s1 字符串中 s2 字符串出现的首位置。如果在 s1 中没有找到 s2，则返回空指针。&lt;br&gt;
size_t strlen(const char * s);&lt;br&gt;
 该函数返回 s 字符串中的字符数，不包括末尾的空字符。&lt;br&gt;
请注意，那些使用 const 关键字的函数原型表明，函数不会更改字符串。例如，下面的函数原型：&lt;br&gt;
char *strcpy(char * restrict s1, const char * restrict s2);&lt;br&gt;
 表明不能更改 s2 指向的字符串，至少不能在 strcpy () 函数中更改。但是可以更改 s1 指向的字符串。这样做很合理，因为 s1 是目标字符串，要改变，而 s2 是源字符串，不能更改。&lt;/p&gt;
&lt;p&gt;关键字 restrict 将在第 12 章中介绍，该关键字限制了函数参数的用法。例如，不能把字符串拷贝给本身。&lt;/p&gt;
&lt;p&gt;第 5 章中讨论过，size_t 类型是 sizeof 运算符返回的类型。C 规定 sizeof 运算符返回一个整数类型，但是并未指定是哪种整数类型，所以 size_t 在一个系统中可以是 unsigned int，而在另一个系统中可以是 unsigned long。string.h 头文件针对特定系统定义了 size_t，或者参考其他有 size_t 定义的头文件。&lt;/p&gt;
&lt;p&gt;前面提到过，参考资料 V 中列出了 string.h 系列的所有函数。除提供 ANSI 标准要求的函数外，许多实现还提供一些其他函数。应查看你所使用的 C 实现文档，了解可以使用哪些函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;字符串示例字符串排序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串示例字符串排序&#34;&gt;#&lt;/a&gt; 字符串示例：字符串排序&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#define SIZE 81        /* 限制字符串长度，包括 \0 */
#define LIM 20         /* 可读入的最多行数 */
#define HALT &#34;&#34;        /* 空字符串停止输入 */
void stsrt(char *strings [], int num);    /* 字符串排序函数 */
char * s_gets(char * st, int n);

int main(void)
{
     char input[LIM][SIZE];       /* 存储输入的数组        */
     char *ptstr[LIM];            /* 内含指针变量的数组    */
     int ct = 0;                  /* 输入计数             */
     int k;                       /* 输出计数             */

 printf(&#34;Input up to %d lines, and I will sort them.\n&#34;, LIM);
 printf(&#34;To stop, press the Enter key at a line&#39;s start.\n&#34;);
 while (ct &amp;lt; LIM &amp;amp;&amp;amp; s_gets(input[ct], SIZE) != NULL
           &amp;amp;&amp;amp; input[ct][0] != &#39;\0&#39;)
 {
      ptstr[ct] = input[ct];  /* 设置指针指向字符串    */
      ct++;
 }
 stsrt(ptstr, ct);            /* 字符串排序函数        */
 puts(&#34;\nHere&#39;s the sorted list:\n&#34;);
 for (k = 0; k &amp;lt; ct; k++)
      puts(ptstr[k]);         /* 排序后的指针          */

 return 0;

}

/* 字符串-指针-排序函数 */
void stsrt(char *strings [], int num)
{
     char *temp;
     int top, seek;

 for (top = 0; top &amp;lt; num - 1; top++)
      for (seek = top + 1; seek &amp;lt; num; seek++)
           if (strcmp(strings[top], strings[seek]) &amp;gt; 0)
           {
                temp = strings[top];
                strings[top] = strings[seek];
                strings[seek] = temp;
           }

}

char * s_gets(char * st, int n)
{
     char * ret_val;
     int i = 0;

 ret_val = fgets(st, n, stdin);
 if (ret_val)
 {
      while (st[i] != &#39;\n&#39; &amp;amp;&amp;amp; st[i] != &#39;\0&#39;)
           i++;
      if (st[i] == &#39;\n&#39;)
           st[i] = &#39;\0&#39;;
      else 
           while (getchar() != &#39;\n&#39;)
                   continue;
 }
 return ret_val;

}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;排序指针而非字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#排序指针而非字符串&#34;&gt;#&lt;/a&gt; 排序指针而非字符串&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/oYWJcq&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/12/02/oYWJcq.png&#34; alt=&#34;字符串排序&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;选择排序算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#选择排序算法&#34;&gt;#&lt;/a&gt; 选择排序算法&lt;/h5&gt;
&lt;p&gt;用 for 循环依次将首元素与每个元素进行比较，排在前面的值就被放置在首元素的位置上，这样可以挑选出排序排在最前面的值；然后依靠外层 for 循环从第二个位置开始，寻找第二靠前的值，依次类推&lt;/p&gt;
&lt;h4 id=&#34;ctypeh字符函数和字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ctypeh字符函数和字符串&#34;&gt;#&lt;/a&gt; ctype.h 字符函数和字符串&lt;/h4&gt;
&lt;p&gt;ToUpper () 函数，利用 toupper () 函数处理字符串中的每个字符，将整个字符串转化为大写&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;void ToUpper(char * str)
{
     while (*str)
     {
          *str = toupper(*str);
          str++;
     }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;PunctCount () 函数，利用 inpunct ()[被用来检测是不是标点符号] 统计字符串中的标点符号个数&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;int PunctCount(const char * str)
{
     int ct = 0;
     while (*str)
     {
          if (ispunct(*str))
               ct++;
          str++;
     }

     return ct;

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;isslower () 函数用户检查是否为小写 如果是 则判定为真 如果不是 则判定为假&lt;br&gt;
 while (*str) 用来循环处理 str 指向地址中的每一个字符，直到遇到空字符，因为空字符的编码值是 0 判定为假 循环结束&lt;/p&gt;
&lt;h4 id=&#34;命令行参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#命令行参数&#34;&gt;#&lt;/a&gt; 命令行参数&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;命令行&lt;/strong&gt;是在命令环境中，用户为运行程序输入命令的行&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;/* repeat.c -- 带参数的 main() */
#include &amp;lt;stdio.h&amp;gt;
int main(int argc, char *argv [])
{
     int count;

     printf(&#34;The command line has %d arguments:\n&#34;, argc - 1);
     for (count = 1; count &amp;lt; argc; count++)
          printf(&#34;%d: %s\n&#34;, count, argv[count]);
     printf(&#34;\n&#34;);
        
     return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面是输出结果&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;C&amp;gt;repeat Resistance is futile&lt;br&gt;
The command line has 3 argumentcs:&lt;br&gt;
1: Resistance&lt;br&gt;
2: is&lt;br&gt;
3: futile&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;C 编译器允许没有参数或者有两个参数&lt;br&gt;
当有两个参数的时候&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个参数是命令行中的字符串数量 通常用 argc 表示 (argumenet count 参数计数)&lt;strong&gt; 系统用空格表示一个字符串的结束和下一个字符串的开始&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;第二个参数是存储命令行字符串的地址的数组 (argv 表示表示参数值 argument value)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;argv [0] 指向 repeat （对大部分系统而言）&lt;br&gt;
argv [1] 指向 Resistance&lt;br&gt;
argv [2] 指向 is&lt;br&gt;
argv [3] 指向 futile&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;main 中形参的声明和其他函数函数中形参的声明一样&lt;/p&gt;
&lt;h4 id=&#34;把字符串转化为数字&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#把字符串转化为数字&#34;&gt;#&lt;/a&gt; 把字符串转化为数字&lt;/h4&gt;
&lt;p&gt;printf () 利用 % d 等转化说明可以把数字转化为字符串显示在屏幕上&lt;br&gt;
 scanf () 可以将命令行中输入的字符串转化为数值&lt;br&gt;
 atoi (用于把字母数字 (以字符串存储数字) 转化为整数 (int 类型)) 该函数接受一个字符串作为参数，返回相应的整数值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果字符串仅以整数开头 后面不是整数 那么 atoi 就会将其中的整数提取出来并且进行转化&lt;/li&gt;
&lt;li&gt;如果命令行参数不是数字，atoi () 函数返回 0 (在 C 标准中这种情况下是未定义的)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;/* hello.c -- 把命令行参数转换为数字 */
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int main(int argc, char *argv [])
{
     int i, times;

     if (argc &amp;lt; 2 || (times = atoi(argv[1])) &amp;lt; 1)
          printf(&#34;Usage: %s positive-number\n&#34;, argv[0]);
     else
          for (i = 0; i &amp;lt; times; i++)
               puts(&#34;Hello, good looking!&#34;);
     return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;输出示例&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ hello 3&lt;br&gt;
Hello, good looking!&lt;br&gt;
Hello, good looking!&lt;br&gt;
Hello, good looking!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;该程序中包含了 stdlib.h 头文件，该头文件中包含了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;atio (): 将字符串转化为 int 类型的值&lt;/li&gt;
&lt;li&gt;atof (): 将字符串转化为 double 类型的值&lt;/li&gt;
&lt;li&gt;atol (): 将字符串转化为 long 类型的值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ANSI C 提供了一套更加智能的函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;strtol (): 把字符串转化为 long 类型的值&lt;/li&gt;
&lt;li&gt;strtoul (): 把字符串转化为 unsigned long 类型的值&lt;/li&gt;
&lt;li&gt;strtod (): 把字符串转化为 double 类型的值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些函数会识别和报告字符串的首字母是否为数字&lt;br&gt;
同时 strtol 和 stroul 还可以指定数字的进制&lt;/p&gt;
&lt;p&gt;strtol 函数原型:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;long strtol(const char * restrict nptr, char ** restrict endptr, int base);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;nptr 是指向待转换字符串的指针&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;endptr 是一个指针的地址，该指针被设置为标识输入数字结束字符的地址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;base 表示以什么进制写入数字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;strtol 最多可以转换三十六进制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;strtoul 函数与 strtol 函数类似，但是它是吧字符串转化为无符号值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;strtod () 只以十进制转化，他只需要两个参数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;字符串关键概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串关键概念&#34;&gt;#&lt;/a&gt; 字符串关键概念&lt;/h4&gt;
&lt;p&gt;我们用言语互动，实用文本的例子不计其数，C 程序通过字符串的方式处理他们&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字符串&lt;/strong&gt;，无论是右字符数组，指针，还是字符串常量来标识，都存储为包含字符编码的一系列字节并且最终以空字符串结尾；C 语言提供一系列库函数处理字符串，查找字符串并分析他们&lt;br&gt;
字符串中用 strcmp () 来代替关系运算符&lt;br&gt;
比较字符串的时候应该使用 strcpy () 和 strncpy () 代替赋值运算符把字符串赋给字符数组&lt;/p&gt;
&lt;h4 id=&#34;字符串小结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串小结&#34;&gt;#&lt;/a&gt; 字符串小结&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;C 字符串是一系列 char 类型的字符，以空字符 (’\0’) 结尾.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;字符串可以存储在字符数组中 字符串还可以用&lt;strong&gt;字符串常量&lt;/strong&gt;来表示 (括在双引号中), 空字符由编译器提供 自行加在字符数组的末尾处&lt;/p&gt;
&lt;p&gt;存储字符串时 字符串的存储长度要比字符串长度多 1, 因为多了一个空字符 (’\0’), 但是 strlen () 计算长度的时候不用考虑空字符的问题 因为 strlen () 函数会自动减去空字符&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;字符串常量又叫做&lt;strong&gt;字符串字面量&lt;/strong&gt;，用于初始化字符数组，按照上文所说，字符串的存储长度要比字符串的长度大 1, 所以为了容纳末尾的空字符，数组的大小至少要比容纳的数组长度多 1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数使用指向字符串首字符的指针来表示待处理的字符串，对应的实际参数分为三种，但是传递的都是首字符的地址，一般来说 没有必要传递字符串的长度 因为函数可以通过字符串末尾存储的空字符来确定字符串的结束&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数组名&lt;/li&gt;
&lt;li&gt;指针变量&lt;/li&gt;
&lt;li&gt;用双引号括起来的字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fgets () 函数获取一行输入，puts () 和 fputs () 函数显示一行的输出，他们是 stdio.h 头文件中的函数 用于代替已被弃用的 gets ()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C 库中有多个&lt;strong&gt;字符串处理函数&lt;/strong&gt;，在 ANSI C 中，这些函数都声明在 string.h 文件中，C 库中海油许多&lt;strong&gt;字符处理函数&lt;/strong&gt;，声明在 ctype.h 文件中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;给 main () 函数提供两个合适的形式参数，可以让程序访问命令行参数.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个参数通常是 int 类型的 &lt;code&gt;argc&lt;/code&gt; , 代表命令行的单词数量&lt;/li&gt;
&lt;li&gt;第二个参数是一个指向数组的指针 &lt;code&gt;argv&lt;/code&gt;  数组内含指向 char 的指针，每个指向 char 的指针都指向一个命令行参数字符串 &lt;code&gt;argv[0]&lt;/code&gt;  指向命令名称， &lt;code&gt;argv[1]&lt;/code&gt;  指向第一个命令行参数以此类推&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;atoi()&lt;/code&gt; , &lt;code&gt;atol()&lt;/code&gt; , &lt;code&gt;atof()&lt;/code&gt;  函数把字符串形式的数组分别转化为 int,long 和 double 类型的数字， &lt;code&gt;strtol()&lt;/code&gt; , &lt;code&gt;strtoul&lt;/code&gt; , &lt;code&gt;strtod()&lt;/code&gt;  函数把字符串形式的数字分别转化为 long,unsigned long 和 double 类型的数字.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="C语言" />
        <updated>2021-11-05T16:00:00.000Z</updated>
    </entry>
</feed>
